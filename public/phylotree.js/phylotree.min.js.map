{"version":3,"file":"phylotree.min.js","sources":["../src/nodes.js","../src/formats/newick.js","../src/formats/nexus.js","../src/formats/phyloxml.js","../src/formats/registry.js","../src/formats/nexml.js","../src/formats/beast.js","../src/traversal.js","../src/branches.js","../src/rooting.js","../src/render/coordinates.js","../src/render/radial.js","../src/render/cartesian.js","../src/render/helpers.js","../src/render/options.js","../src/render/nodes.js","../src/render/clades.js","../src/render/edges.js","../src/render/events.js","../src/render/menus.js","../src/render/draw.js","../src/main.js","../src/metrics/pairwise-distances.js","../src/metrics/root-to-tip.js","../src/max-parsimony.js","../src/export.js","../src/extract-dates.js","../src/neighbor-join.js","../src/metrics/center-of-tree.js","../src/clustering/cluster-picker.js","../src/metrics/compute-midpoint.js","../src/msa-parsers/fasta.js","../src/clustering/phylopart.js","../src/metrics/sackins.js"],"sourcesContent":["import * as _ from \"underscore\";\r\n\r\n// These methods are part of the Phylotree object\r\n\r\nexport function graftANode(graftAt, newChild, newParent, lengths) {\r\n\r\n  let nodes = this.nodes.descendants();\r\n\r\n  if (graftAt.parent) {\r\n\r\n    let nodeIndex = nodes.indexOf(graftAt);\r\n\r\n    if (nodeIndex >= 0) {\r\n\r\n      let parentIndex = graftAt.parent.children.indexOf(graftAt);\r\n\r\n      let newSplit = {\r\n          name: newParent,\r\n          parent: graftAt.parent,\r\n          attribute: lengths ? lengths[2] : null,\r\n          original_child_order: graftAt[\"original_child_order\"]\r\n        },\r\n        newNode = {\r\n          name: newChild,\r\n          parent: newSplit,\r\n          attribute: lengths ? lengths[1] : null,\r\n          original_child_order: 2\r\n        };\r\n\r\n      newSplit[\"children\"] = [graftAt, newNode];\r\n      graftAt[\"parent\"].children[parentIndex] = newSplit;\r\n      graftAt.parent = newSplit;\r\n      graftAt[\"attribute\"] = lengths ? lengths[0] : null;\r\n      graftAt[\"original_child_order\"] = 1;\r\n    }\r\n  }\r\n\r\n  return this;\r\n\r\n}\r\n\r\nexport function addChild(parent, child) {\r\n\r\n  if(parent.children) {\r\n    parent.children.push(child);\r\n  } else {\r\n    parent[\"children\"] = [child];\r\n  }\r\n\r\n  return parent;\r\n\r\n}\r\n\r\nexport function createNode(name, lengths) {\r\n\r\n  return {\r\n    data: {\r\n      name: name,\r\n      attribute: lengths ? lengths[1] : null\r\n    },\r\n    parent: '',\r\n  };\r\n\r\n}\r\n\r\n/**\r\n * Delete a given node.\r\n *\r\n * @param {Node} The node to be deleted, or the index of such a node.\r\n * @returns The current ``phylotree``.\r\n */\r\nexport function deleteANode(index) {\r\n  let nodes = this.nodes.descendants();\r\n\r\n  if (typeof index != \"number\") {\r\n    return this.deleteANode(nodes.indexOf(index));\r\n  }\r\n\r\n  if (index > 0 && index < nodes.length) {\r\n    let node = nodes[index];\r\n\r\n    if (node.parent) {\r\n      // can only delete nodes that are not the root\r\n      let delete_me_idx = node.parent.children.indexOf(node);\r\n\r\n      if (delete_me_idx >= 0) {\r\n        nodes.splice(index, 1);\r\n\r\n        if (node.children) {\r\n          node.children.forEach(function(d) {\r\n            d[\"original_child_order\"] = node.parent.children.length;\r\n            node.parent.children.push(d);\r\n            d.parent = node.parent;\r\n          });\r\n        }\r\n\r\n        if (node.parent.children.length > 2) {\r\n          node.parent.children.splice(delete_me_idx, 1);\r\n        } else {\r\n          if (node.parent.parent) {\r\n            node.parent.parent.children[\r\n              node.parent.parent.children.indexOf(node.parent)\r\n            ] =\r\n              node.parent.children[1 - delete_me_idx];\r\n            node.parent.children[1 - delete_me_idx].parent = node.parent.parent;\r\n            nodes.splice(nodes.indexOf(node.parent), 1);\r\n          } else {\r\n            nodes.splice(0, 1);\r\n            nodes.parent = null;\r\n            delete nodes.data[\"attribute\"];\r\n            delete nodes.data[\"annotation\"];\r\n            delete nodes.data[\"original_child_order\"];\r\n            nodes.name = \"root\";\r\n            nodes.data.name = \"root\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * Get the tips of the tree\r\n * @returns {Array} Nodes in the current ``phylotree``.\r\n */\r\nexport function getTips() {\r\n  // get all nodes that have no nodes\r\n  return _.filter(this.nodes.descendants(), n => {\r\n    return !_.has(n, \"children\");\r\n  });\r\n}\r\n\r\n/**\r\n * Get the internal nodes of the tree\r\n * @returns {Array} Nodes in the current ``phylotree``.\r\n */\r\nexport function getInternals() {\r\n  // get all nodes that have no nodes\r\n  return _.filter(this.nodes.descendants(), n => {\r\n    return _.has(n, \"children\");\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Get the root node.\r\n *\r\n * @returns the current root node of the ``phylotree``.\r\n */\r\nexport function getRootNode() {\r\n  return this.nodes;\r\n}\r\n\r\n/**\r\n * Get an array of all nodes.\r\n * @returns {Array} Nodes in the current ``phylotree``.\r\n */\r\nexport function getNodes() {\r\n  return this.nodes;\r\n}\r\n\r\n/**\r\n * Get a node by name.\r\n *\r\n * @param {String} name Name of the desired node.\r\n * @returns {Node} Desired node.\r\n */\r\nexport function getNodeByName(name) {\r\n  return _.filter(this.nodes.descendants(), d => {\r\n    return d.data.name == name;\r\n  })[0];\r\n}\r\n\r\n/**\r\n * Add attributes to nodes. New attributes will be placed in the\r\n * ``annotations`` key of any nodes that are matched.\r\n *\r\n * @param {Object} attributes An object whose keys are the names of nodes\r\n * to modify, and whose values are the new attributes to add.\r\n */\r\nexport function assignAttributes(attributes) {\r\n  //return nodes;\r\n  // add annotations to each matching node\r\n  _.each(this.nodes.descendants(), function(d) {\r\n    if (d.data && (d.data.name in attributes)) {\r\n      d[\"annotations\"] = attributes[d.data.name];\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Determine if a given node is a leaf node.\r\n *\r\n * @param {Node} A node in a tree.\r\n * @returns {Bool} Whether or not the node is a leaf node.\r\n */\r\nexport function isLeafNode(node) {\r\n  return !_.has(node, \"children\")\r\n}\r\n\r\n/**\r\n * Update a given key name in each node.\r\n *\r\n * @param {String} old_key The old key name.\r\n * @param {String} new_key The new key name.\r\n * @returns The current ``this``.\r\n */\r\nexport function updateKeyName(old_key, new_key) {\r\n  this.nodes.each(function(n) {\r\n    if (old_key in n) {\r\n      if (new_key) {\r\n        n[new_key] = n[old_key];\r\n      }\r\n      delete n[old_key];\r\n    }\r\n  });\r\n\r\n  return this;\r\n}\r\n\r\nexport function clearInternalNodes(respect) {\r\n  if (!respect) {\r\n    this.nodes.each(d => {\r\n      if (!isLeafNode(d)) {\r\n\r\n        // TODO: Move away from storing attribute data as root (BREAKS occasionally with d3>3)\r\n        d[this.selection_attribute_name] = false;\r\n\r\n        if(!d.data.traits) {\r\n          d.data.traits = {};\r\n        }\r\n        d.data.traits[this.selection_attribute_name] = d[this.selection_attribute_name];\r\n\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","import { isLeafNode } from \"../nodes\";\r\n\r\n/**\r\n * Parses a Newick string into an equivalent JSON representation that is\r\n * suitable for consumption by ``hierarchy``.\r\n *\r\n * Optionally accepts bootstrap values. Currently supports Newick strings with or without branch lengths,\r\n * as well as tagged trees such as\r\n *  ``(a,(b{TAG},(c{TAG},d{ANOTHERTAG})))``\r\n *\r\n * @param {String} nwk_str - A string representing a phylogenetic tree in Newick format.\r\n * @param {Object} bootstrap_values.\r\n * @returns {Object} An object with keys ``json`` and ``error``.\r\n */\r\n\r\nfunction newickParser(nwk_str, options={}) {\r\n\r\n  const bootstrap_values = true,\r\n    int_or_float = /^-?\\d+(\\.\\d+)?$/;\r\n  let left_delimiter = options.left_delimiter ||  '{',\r\n    right_delimiter = options.right_delimiter ||  '}';\r\n  let clade_stack = [];\r\n\r\n  function addNewTreeLevel() {\r\n    let new_level = {\r\n      name: null\r\n    };\r\n\r\n    let the_parent = clade_stack[clade_stack.length - 1];\r\n\r\n    if (!(\"children\" in the_parent)) {\r\n      the_parent[\"children\"] = [];\r\n    }\r\n\r\n    clade_stack.push(new_level);\r\n\r\n    the_parent[\"children\"].push(clade_stack[clade_stack.length - 1]);\r\n\r\n    clade_stack[clade_stack.length - 1][\"original_child_order\"] =\r\n      the_parent[\"children\"].length;\r\n  }\r\n\r\n  function finishNodeDefinition() {\r\n\r\n    let this_node = clade_stack.pop();\r\n\r\n    this_node[\"name\"] = current_node_name;\r\n\r\n    if (bootstrap_values && \"children\" in this_node) {\r\n      this_node[\"bootstrap_values\"] = current_node_name;\r\n    } else {\r\n      this_node[\"name\"] = current_node_name;\r\n    }\r\n\r\n    this_node[\"attribute\"] = current_node_attribute;\r\n    if(left_delimiter == \"[\" && current_node_annotation.includes(\"&&NHX\")) {\r\n      current_node_annotation\r\n        .split(':')\r\n        .slice(1)\r\n        .forEach(annotation => {\r\n          const [key, value] = annotation.split('=');\r\n          this_node[key] = int_or_float.test(value) ? +value : value;\r\n        });\r\n    } else {\r\n      this_node[\"annotation\"] = current_node_annotation;\r\n    }\r\n\r\n    current_node_name = \"\";\r\n    current_node_attribute = \"\";\r\n    current_node_annotation = \"\";\r\n  }\r\n\r\n  function generateError(location) {\r\n    return {\r\n      json: null,\r\n      error:\r\n        \"Unexpected '\" +\r\n        nwk_str[location] +\r\n        \"' in '\" +\r\n        nwk_str.substring(location - 20, location + 1) +\r\n        \"[ERROR HERE]\" +\r\n        nwk_str.substring(location + 1, location + 20) +\r\n        \"'\"\r\n    };\r\n  }\r\n\r\n  let automaton_state = 0;\r\n  let current_node_name = \"\";\r\n  let current_node_attribute = \"\";\r\n  let current_node_annotation = \"\";\r\n  let quote_delimiter = null;\r\n\r\n  let name_quotes = {\r\n    \"'\": 1,\r\n    '\"': 1\r\n  };\r\n\r\n  let tree_json = {\r\n    name: \"root\"\r\n  };\r\n\r\n  clade_stack.push(tree_json);\r\n\r\n  var space = /\\s/;\r\n\r\n  for (var char_index = 0; char_index < nwk_str.length; char_index++) {\r\n    try {\r\n      var current_char = nwk_str[char_index];\r\n      switch (automaton_state) {\r\n        case 0: {\r\n          // look for the first opening parenthesis\r\n          if (current_char == \"(\") {\r\n            addNewTreeLevel();\r\n            automaton_state = 1; // expecting node name\r\n          }\r\n          break;\r\n        }\r\n        case 1: // name\r\n        case 3: {\r\n          // branch length\r\n          // reading name\r\n          if (current_char == \":\") {\r\n            automaton_state = 3;\r\n          } else if (current_char == \",\" || current_char == \")\") {\r\n            try {\r\n              finishNodeDefinition();\r\n              automaton_state = 1;\r\n              if (current_char == \",\") {\r\n                addNewTreeLevel();\r\n              }\r\n            } catch (e) {\r\n              return generateError(char_index);\r\n            }\r\n          } else if (current_char == \"(\") {\r\n            if (current_node_name.length > 0) {\r\n              return generateError(char_index);\r\n            } else {\r\n              addNewTreeLevel();\r\n            }\r\n          } else if (current_char in name_quotes) {\r\n            if (\r\n              automaton_state == 1 &&\r\n              current_node_name.length === 0 &&\r\n              current_node_attribute.length === 0 &&\r\n              current_node_annotation.length === 0\r\n            ) {\r\n              automaton_state = 2;\r\n              quote_delimiter = current_char;\r\n              continue;\r\n            }\r\n            return generateError(char_index);\r\n          } else {\r\n            if (current_char == left_delimiter) {\r\n              if (current_node_annotation.length) {\r\n                return generateError(char_index);\r\n              } else {\r\n                automaton_state = 4;\r\n              }\r\n            } else {\r\n              if (automaton_state == 3) {\r\n                current_node_attribute += current_char;\r\n              } else {\r\n                if (space.test(current_char)) {\r\n                  continue;\r\n                }\r\n                if (current_char == \";\") {\r\n                  // semicolon terminates tree definition\r\n                  char_index = nwk_str.length;\r\n                  break;\r\n                }\r\n                current_node_name += current_char;\r\n              }\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n        case 2: {\r\n          // inside a quoted expression\r\n          if (current_char == quote_delimiter) {\r\n            if (char_index < nwk_str.length - 1) {\r\n              if (nwk_str[char_index + 1] == quote_delimiter) {\r\n                char_index++;\r\n                current_node_name += quote_delimiter;\r\n                continue;\r\n              }\r\n            }\r\n            quote_delimiter = 0;\r\n            automaton_state = 1;\r\n            continue;\r\n          } else {\r\n            current_node_name += current_char;\r\n          }\r\n          break;\r\n        }\r\n        case 4: {\r\n          // inside a comment / attribute\r\n          if (current_char == right_delimiter) {\r\n            automaton_state = 3;\r\n          } else {\r\n            if (current_char == left_delimiter) {\r\n              return generateError(char_index);\r\n            }\r\n            current_node_annotation += current_char;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    } catch (e) {\r\n      return generateError(char_index);\r\n    }\r\n  }\r\n\r\n  if (clade_stack.length != 1) {\r\n    return generateError(nwk_str.length - 1);\r\n  }\r\n\r\n  return {\r\n    json: tree_json,\r\n    error: null\r\n  };\r\n}\r\n\r\n/**\r\n * Return Newick string representation of a phylotree.\r\n *\r\n * @param {Function} annotator - Function to apply to each node, determining\r\n * what label is written (optional).\r\n * @param {Node} node - start at this node (default == root)\r\n * @returns {String} newick - Phylogenetic tree serialized as a Newick string.\r\n */\r\n\r\n// TODO: break this out into two seperate functions\r\nexport function getNewick(annotator, root) {\r\n\r\n  let self = this;\r\n\r\n  if (!annotator) annotator = d => '';\r\n\r\n  function nodeDisplay(n) {\r\n    if (!isLeafNode(n)) {\r\n      element_array.push(\"(\");\r\n      n.children.forEach(function(d, i) {\r\n        if (i) {\r\n          element_array.push(\",\");\r\n        }\r\n        nodeDisplay(d);\r\n      });\r\n      element_array.push(\")\");\r\n    }\r\n\r\n    if(n.data.name != 'root') {\r\n      element_array.push(n.data.name);\r\n    }\r\n    element_array.push(annotator(n));\r\n\r\n    let bl = self.branch_length_accessor(n);\r\n\r\n    if (bl !== undefined) {\r\n      element_array.push(\":\" + bl);\r\n    }\r\n  }\r\n\r\n  let element_array = [];\r\n  annotator = annotator || \"\";\r\n  nodeDisplay(root || this.nodes);\r\n\r\n  return element_array.join(\"\")+\";\";\r\n\r\n}\r\n\r\nexport default newickParser;\r\n","import * as _ from \"underscore\";\r\nimport {default as newickParser} from \"./newick\";\r\n\r\nexport function parseAnnotations (buf) {\r\n\r\n  let str = buf;\r\n  let index = str.toUpperCase().indexOf('BEGIN DATA;');\r\n  let data = str.slice(index);\r\n\r\n  if(data.length < 2) {\r\n    return '';\r\n  }\r\n\r\n  index = data.toUpperCase().indexOf('END;');\r\n  let data_str = data.slice(0, index);\r\n\r\n  // split on semicolon\r\n  data = _.map(data_str.split(';'), d => { return d.trim() } );\r\n\r\n  // get dimensions\r\n  let dimensions = _.filter(data, d => {return d.toUpperCase().startsWith('DIMENSION')}); \r\n  dimensions = dimensions[0].split(' ');\r\n  dimensions = _.object(_.map(_.rest(dimensions), d => { return d.split('=') }));\r\n\r\n  // get formats\r\n  let format = _.filter(data, d => {return d.toUpperCase().startsWith('FORMAT')}); \r\n  format = format[0].split(' ');\r\n  format = _.object(_.map(_.rest(format), d => { return d.split('=') }));\r\n  format.symbols = _.reject(format.symbols.split(\"\"), d => d=='\"');\r\n\r\n  // get character matrix\r\n  let matrix = _.filter(data, d => {return d.toUpperCase().startsWith('MATRIX')}); \r\n  matrix = matrix[0].split('\\n')\r\n  matrix = _.object(_.map(_.rest(matrix), d=> { return _.compact(d.split(' ')) }));\r\n\r\n  // create all possible states for matrix\r\n  matrix = _.mapObject(matrix, (v,k) => { \r\n\r\n    if(v == '?') {\r\n      return format.symbols\r\n    }\r\n    else { \r\n      return Array(v)\r\n    }\r\n  \r\n  });\r\n\r\n  return { 'dimensions' : dimensions, 'format' : format, 'matrix' : matrix }\r\n\r\n}\r\n\r\n/**\r\n *  Loads annotations from a nexus-formatted buffer and annotates existing tree\r\n *  nodes appropriately.\r\n *\r\n * @param {Object} tree - Instatiated phylotree\r\n * @param {String} NEXUS string\r\n * @returns {Object} Annotations\r\n */\r\nexport function loadAnnotations(tree, label, annotations) {\r\n\r\n  // if filename, then load from filesystem\r\n  _.each(tree.getTips(), d => { d.data[\"test\"] = annotations.matrix[d.data.name] });\r\n\r\n  // decorate nodes with annotations\r\n\r\n}\r\n\r\nexport default function loadTree(buf) {\r\n\r\n  // if filename, then load from filesystem\r\n  // Parse first tree from NEXUS file and send to newickParser\r\n\r\n  // Make all upper case\r\n  let str = buf;\r\n\r\n  // Get TREE block\r\n  let index = str.toUpperCase().indexOf('BEGIN TREES;');\r\n  let split = str.slice(index);\r\n\r\n  if(split.length < 2) {\r\n    return '';\r\n  }\r\n\r\n  index = split.toUpperCase().indexOf('END;');\r\n  let tree_str = split.slice(0, index);\r\n\r\n  // Filter lines that start with TREE\r\n  let trees = tree_str.split('\\n');\r\n  trees = _.filter(trees, d => { return d.trim().toUpperCase().startsWith('TREE') });\r\n\r\n  // Identify start of newick string\r\n  return newickParser(trees[0]);\r\n\r\n}\r\n\r\n","// Changes XML to JSON\r\n// Modified version from here: http://davidwalsh.name/convert-xml-json\r\nfunction xmlToJson(xml) {\r\n\r\n\t// Create the return object\r\n\tvar obj = {};\r\n\r\n\tif (xml.nodeType == 1) { // element\r\n\t\t// do attributes\r\n\t\tif (xml.attributes.length > 0) {\r\n\t\tobj[\"@attributes\"] = {};\r\n\t\t\tfor (var j = 0; j < xml.attributes.length; j++) {\r\n\t\t\t\tvar attribute = xml.attributes.item(j);\r\n\t\t\t\tobj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n\t\t\t}\r\n\t\t}\r\n\t} else if (xml.nodeType == 3) { // text\r\n\t\tobj = xml.nodeValue;\r\n\t}\r\n\r\n\t// do children\r\n\t// If just one text node inside\r\n\tif (xml.hasChildNodes() && xml.childNodes.length === 1 && xml.childNodes[0].nodeType === 3) {\r\n\t\tobj = xml.childNodes[0].nodeValue;\r\n\t}\r\n\telse if (xml.hasChildNodes()) {\r\n\t\tfor(var i = 0; i < xml.childNodes.length; i++) {\r\n\t\t\tvar item = xml.childNodes.item(i);\r\n\t\t\tvar nodeName = item.nodeName;\r\n\t\t\tif (typeof(obj[nodeName]) == \"undefined\") {\r\n\t\t\t\tobj[nodeName] = xmlToJson(item);\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof(obj[nodeName].push) == \"undefined\") {\r\n\t\t\t\t\tvar old = obj[nodeName];\r\n\t\t\t\t\tobj[nodeName] = [];\r\n\t\t\t\t\tobj[nodeName].push(old);\r\n\t\t\t\t}\r\n\t\t\t\tobj[nodeName].push(xmlToJson(item));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n}\r\n\r\nvar phyloxml_parser = function(xml, options) {\r\n\r\n  function parsePhyloxml(node, index) {\r\n    if (node.clade) {\r\n      node.clade.forEach(parsePhyloxml);\r\n      node.children = node.clade;\r\n      delete node.clade;\r\n    }\r\n\r\n\t\tnode.annotation = 1;\r\n\t\tnode.attribute = \"0.01\";\r\n    if (node.branch_length) {\r\n\t\t\tnode.attribute = node.branch_length;\r\n    }\r\n    if (node.taxonomy) {\r\n      node.name = node.taxonomy.scientific_name;\r\n    }\r\n\r\n    node.annotation = \"\";\r\n\r\n  }\r\n\r\n  var tree_json;\r\n\r\n  xml = xmlToJson(xml);\r\n  tree_json = xml.phyloxml.phylogeny.clade;\r\n  tree_json.name = \"root\";\r\n  parsePhyloxml(tree_json, 0);\r\n\r\n  return {\r\n    json: tree_json,\r\n    error: null\r\n  };\r\n};\r\n\r\nexport default phyloxml_parser;\r\n","import { default as nexml_parser } from \"./nexml\";\r\nimport { default as newickParser } from \"./newick\";\r\nimport { default as nexus_parser } from \"./nexus\";\r\nimport { default as phyloxml_parser } from \"./phyloxml\";\r\nimport { default as beast_parser } from \"./beast\";\r\n\r\n/* \r\n * A parser must have two fields, the object and\r\n * options\r\n */\r\nvar format_registry = {\r\n  nexml: nexml_parser,\r\n  phyloxml: phyloxml_parser,\r\n  nexus : nexus_parser,\r\n  nwk: newickParser,\r\n  nhx: newickParser,\r\n  beast: beast_parser\r\n};\r\n\r\nexport default format_registry;\r\n","import * as _ from \"underscore\";\r\n//import { parseString } from \"xml2js\";\r\n\r\nvar nexml_parser = function(xml_string, options) {\r\n  var trees;\r\n  parseString(xml_string, function(error, xml) {\r\n    trees = xml[\"nex:nexml\"].trees[0].tree.map(function(nexml_tree) {\r\n      var node_list = nexml_tree.node.map(d => d.$),\r\n        node_hash = node_list.reduce(function(a, b) {\r\n          b.edges = [];\r\n          b.name = b.id;\r\n          a[b.id] = b;\r\n          return a;\r\n        }, {}),\r\n        roots = node_list.filter(d => d.root),\r\n        root_id = roots > 0 ? roots[0].id : node_list[0].id;\r\n      node_hash[root_id].name = \"root\";\r\n\r\n      nexml_tree.edge.map(d => d.$).forEach(function(edge) {\r\n        node_hash[edge.source].edges.push(edge);\r\n      });\r\n\r\n      function parseNexml(node, index) {\r\n        if (node.edges) {\r\n          var targets = _.pluck(node.edges, \"target\");\r\n          node.children = _.values(_.pick(node_hash, targets));\r\n          node.children.forEach(function(child, i) {\r\n            child.attribute = node.edges[i].length || \"\";\r\n          });\r\n          node.children.forEach(parseNexml);\r\n          node.annotation = \"\";\r\n        }\r\n      }\r\n\r\n      parseNexml(node_hash[root_id]);\r\n      return node_hash[root_id];\r\n    });\r\n  });\r\n  return trees;\r\n};\r\n\r\nexport default nexml_parser;\r\n","import newickParser from \"./newick\";\r\n\r\nexport default function(newick, options) {\r\n  options.left_delimiter = '[';\r\n  options.right_delimiter = ']';\r\n  const parsed_newick = newickParser(newick, options);\r\n  function parseBeastNode(node) {\r\n    if(node.annotation) {\r\n      node.beast = {};\r\n      const tokens = node.annotation.split(/=|,|{|}/)\r\n        .filter(token => token);\r\n      for(var i = 0; i < tokens.length; i+=2) {\r\n        let key = tokens[i].replace(/&|%/g, '');\r\n        if(/[a-df-zA-DF-Z]+/.test(tokens[i+2])) {\r\n          node.beast[key] = +tokens[i+1];\r\n        } else {\r\n          node.beast[key] = [+tokens[i+1], +tokens[i+2]];\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n    node.annotation = undefined;\r\n    if(node.children) {\r\n      node.children.forEach(parseBeastNode);\r\n    }\r\n  }\r\n  parseBeastNode(parsed_newick.json);\r\n  return parsed_newick;\r\n}\r\n","import * as _ from \"lodash\";\r\n\r\nexport function postOrder(node, callback, backtrack) {\r\n\r\n  let nodes = [node],\r\n    next = [],\r\n    children,\r\n    i,\r\n    n;\r\n\r\n  while ((node = nodes.pop())) {\r\n    if (!(backtrack && backtrack(node))) {\r\n      next.push(node), (children = node.children);\r\n      if (children)\r\n        for (i = 0, n = children.length; i < n; ++i) {\r\n          nodes.push(children[i]);\r\n        }\r\n    }\r\n  }\r\n\r\n  while ((node = next.pop())) {\r\n    callback(node);\r\n  }\r\n\r\n  return node;\r\n\r\n}\r\n\r\nexport function preOrder(node, callback, backtrack) {\r\n  let nodes = [node],\r\n    children,\r\n    i;\r\n\r\n  while ((node = nodes.pop())) {\r\n    if (!(backtrack && backtrack(node))) {\r\n      callback(node), (children = node.children);\r\n      if (children)\r\n        for (i = children.length - 1; i >= 0; --i) {\r\n          nodes.push(children[i]);\r\n        }\r\n    }\r\n  }\r\n\r\n  return node;\r\n}\r\n\r\nexport default function inOrder(node, callback, backtrack) {\r\n  let current,\r\n    next = [node],\r\n    children,\r\n    i,\r\n    n;\r\n\r\n  do {\r\n    (current = next.reverse()), (next = []);\r\n    while ((node = current.pop())) {\r\n      if (!(backtrack && backtrack(node))) {\r\n        callback(node), (children = node.children);\r\n        if (children)\r\n          for (i = 0, n = children.length; i < n; ++i) {\r\n            next.push(children[i]);\r\n          }\r\n      }\r\n    }\r\n  } while (next.length);\r\n\r\n  return node;\r\n}\r\n\r\n/**\r\n * Traverses a tree that represents left-child right-sibling\r\n * @param {Object} tree -- the phylotree.js tree object \r\n * @return {Object} An edge list that represents the original multi-way tree\r\n *\r\n */\r\nexport function leftChildRightSibling(root) {\r\n\r\n  let declareTrueParent = function(n) {\r\n\r\n    if(n.children) {\r\n      // left child is the child\r\n      n.children[0].data.multiway_parent = n;\r\n\r\n      // right child is the sibling\r\n      n.children[1].data.multiway_parent = n.parent;\r\n    }\r\n\r\n  }\r\n\r\n  // First decorate each node with its true parent node\r\n  postOrder(root, declareTrueParent);\r\n\r\n  // return edge list\r\n  let edge_list = _.map(root.descendants(), n => { \r\n\r\n    let source = n.data.multiway_parent; \r\n    let name = \"unknown\";\r\n\r\n    if(source) {\r\n      name = source.data.name;\r\n    }\r\n\r\n    // In order to get the true name of the infector/infectee, we must traverse\r\n    // the tree from the multiway_parents node.\r\n\r\n    return {\"source\" : n.data.multiway_parent, \"target\" : n, \"name\": name } });\r\n\r\n  // Construct edge list by new parent-child listing\r\n  return edge_list;\r\n\r\n}\r\n\r\n\r\n\r\n","import * as _ from \"underscore\";\r\n\r\n// These methods are part of the Phylotree object\r\n\r\nexport function setPartitions(partitions) {\r\n  this.partitions = partitions;\r\n}\r\n\r\nexport function getPartitions(attributes) {\r\n  return this.partitions;\r\n}\r\n\r\n/**\r\n * Returns T/F whether every branch in the tree has a branch length\r\n *\r\n * @returns {Object} true if  every branch in the tree has a branch length\r\n */\r\nexport default function hasBranchLengths() {\r\n\r\n  let bl = this.branch_length;\r\n\r\n  if (bl) {\r\n    return _.every(this.nodes.descendants(), function(node) {\r\n      return !node.parent || !_.isUndefined(bl(node));\r\n    });\r\n\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns branch lengths\r\n *\r\n * @returns {Array} array of branch lengths\r\n */\r\nexport function getBranchLengths() {\r\n\r\n  let bl = this.branch_length;\r\n  return _.map(this.nodes.descendants(), node => { return bl(node)});\r\n\r\n}\r\n\r\n\r\nexport function defBranchLengthAccessor(_node, new_length) {\r\n\r\n  let _node_data = _node.data;\r\n\r\n  if (\r\n    \"attribute\" in _node_data &&\r\n    _node_data[\"attribute\"] &&\r\n    _node_data[\"attribute\"].length\r\n  ) {\r\n\r\n    if(new_length > 0) {\r\n      _node_data[\"attribute\"] = String(new_length);\r\n    }\r\n\r\n    let bl = parseFloat(_node_data[\"attribute\"]);\r\n\r\n    if (!isNaN(bl)) {\r\n      return Math.max(0, bl);\r\n    }\r\n\r\n  }\r\n\r\n  // Allow for empty branch length at root\r\n  if(_node_data.name == \"root\") {\r\n    return 0;\r\n  }\r\n\r\n  console.warn('Undefined branch length at ' + _node_data.name + '!');\r\n\r\n  return undefined;\r\n\r\n}\r\n\r\n/**\r\n * Get or set branch length accessor.\r\n *\r\n * @param {Function} attr Empty if getting, or new branch length accessor if setting.\r\n * @returns {Object} The branch length accessor if getting, or the current this if setting.\r\n */\r\nexport function setBranchLength(attr) {\r\n  if (!arguments.length) return this.branch_length_accessor;\r\n  this.branch_length_accessor = attr ? attr : defBranchLengthAccessor;\r\n  return this;\r\n}\r\n\r\n/**\r\n * Normalizes branch lengths\r\n */\r\nexport function normalize(attr) {\r\n\r\n  let bl = this.branch_length;\r\n\r\n  let branch_lengths = _.map(this.nodes.descendants(), function(node) {\r\n    if(bl(node)) {\r\n    return bl(node);\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  const max_bl = _.max(branch_lengths);\r\n  const min_bl = _.min(branch_lengths);\r\n\r\n  let scaler = function (x) {\r\n    return (x - min_bl)/(max_bl - min_bl);\r\n  }\r\n\r\n  _.each(this.nodes.descendants(), (node) => {\r\n      let len = bl(node);\r\n      if(len) {\r\n        bl(node, scaler(len));\r\n      }     \r\n  });\r\n\r\n  return this;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Scales branch lengths\r\n *\r\n * @param {Function} function that scales the branches\r\n */\r\nexport function scale(scale_by) {\r\n\r\n  let bl = this.branch_length;\r\n\r\n  _.each(this.nodes.descendants(), (node) => {\r\n      let len = bl(node);\r\n      if(len) {\r\n        bl(node, scale_by(len));\r\n      }     \r\n  });\r\n\r\n  return this;\r\n\r\n}\r\n\r\n/**\r\n * Get or set branch name accessor.\r\n *\r\n * @param {Function} attr (Optional) If setting, a function that accesses a branch name\r\n * from a node.\r\n * @returns The ``nodeLabel`` accessor if getting, or the current ``this`` if setting.\r\n */\r\nexport function branchName(attr) {\r\n  if (!arguments.length) return this.nodeLabel;\r\n  this.nodeLabel = attr;\r\n  return this;\r\n}\r\n","import * as d3 from \"d3\";\r\nimport * as _ from \"underscore\";\r\n\r\n/**\r\n* Reroot the tree on the given node.\r\n*\r\n* @param {Node} node Node to reroot on.\r\n* @param {fraction} if specified, partition the branch not into 0.5 : 0.5, but according to \r\n                   the specified fraction\r\n                   \r\n* @returns {Phylotree} The current ``phylotree``.\r\n*/\r\nexport function reroot(node, fraction) {\r\n\r\n  /** TODO add the option to root in the middle of a branch */\r\n  if(!(node instanceof d3.hierarchy)) {\r\n   throw new Error('node needs to be an instance of a d3.hierarchy node!');\r\n  }\r\n\r\n  let nodes = this.nodes.copy();\r\n\r\n  fraction = fraction !== undefined ? fraction : 0.5;\r\n\r\n  if (node.parent) {\r\n\r\n    var new_json = d3.hierarchy({\r\n      name: \"new_root\"\r\n    });\r\n    \r\n    new_json.children = [node.copy()];\r\n    new_json.data.__mapped_bl = undefined\r\n\r\n    nodes.each(n => {\r\n      n.data.__mapped_bl = this.branch_length_accessor(n);\r\n    });\r\n\r\n    this.setBranchLength(n => {\r\n      return n.data.__mapped_bl;\r\n    });\r\n\r\n    let remove_me = node,\r\n      current_node = node.parent,\r\n      stashed_bl = _.noop();\r\n\r\n    let apportioned_bl =\r\n      node.data.__mapped_bl === undefined ? undefined : node.data.__mapped_bl * fraction;\r\n\r\n    stashed_bl = current_node.data.__mapped_bl;\r\n\r\n    current_node.data.__mapped_bl =\r\n      node.data.__mapped_bl === undefined\r\n        ? undefined\r\n        : node.data.__mapped_bl - apportioned_bl;\r\n\r\n    node.data.__mapped_bl = apportioned_bl;\r\n\r\n    var remove_idx;\r\n\r\n    if (current_node.parent) {\r\n\r\n      new_json.children.push(current_node);\r\n\r\n      while (current_node.parent) {\r\n\r\n        remove_idx = current_node.children.indexOf(remove_me);\r\n\r\n        if (current_node.parent.parent) {\r\n          current_node.children.splice(remove_idx, 1, current_node.parent);\r\n        } else {\r\n          current_node.children.splice(remove_idx, 1);\r\n        }\r\n\r\n        let t = current_node.parent.data.__mapped_bl;\r\n\r\n        if (t !== undefined) {\r\n          current_node.parent.data.__mapped_bl = stashed_bl;\r\n          stashed_bl = t;\r\n        }\r\n\r\n        remove_me = current_node;\r\n        current_node = current_node.parent;\r\n      }\r\n\r\n      remove_idx = current_node.children.indexOf(remove_me);\r\n      current_node.children.splice(remove_idx, 1);\r\n\r\n    } else {\r\n\r\n      remove_idx = current_node.children.indexOf(remove_me);\r\n      current_node.children.splice(remove_idx, 1);\r\n      stashed_bl = current_node.data.__mapped_bl;\r\n      remove_me = new_json;\r\n\r\n    }\r\n\r\n    // current_node is now old root, and remove_me is the root child we came up\r\n    // the tree through\r\n    if (current_node.children.length == 1) {\r\n\r\n      if (stashed_bl) {\r\n        current_node.children[0].data.__mapped_bl += stashed_bl;\r\n      }\r\n\r\n      remove_me.children = remove_me.children.concat(current_node.children);\r\n\r\n    } else {\r\n\r\n      let new_node = new d3.hierarchy({ name: \"__reroot_top_clade\", __mapped_bl: stashed_bl });\r\n      _.extendOwn (new_json.children[0], node);\r\n      new_node.data.__mapped_bl = stashed_bl;\r\n      new_node.children = current_node.children.map(function(n) {\r\n        n.parent = new_node;\r\n        return n;\r\n      });\r\n\r\n      new_node.parent = remove_me;\r\n      remove_me.children.push(new_node);\r\n\r\n   }\r\n\r\n  }\r\n\r\n  // need to traverse the nodes and update parents\r\n  this.update(new_json);\r\n\r\n  this.traverse_and_compute(n => {\r\n    _.each (n.children, (c) => {c.parent = n;})\r\n  }, \"pre-order\");\r\n\r\n\r\n  if(!_.isUndefined(this.display)) {\r\n\r\n    // get options\r\n    let options = this.display.options;\r\n    // get container\r\n    d3.select(this.display.container).select('svg').remove()\r\n\r\n    // retain selection\r\n    let selectionName = this.display.selection_attribute_name\r\n\r\n    delete this.display;\r\n\r\n    let rendered_tree = this.render(options);\r\n    rendered_tree.selectionLabel(selectionName);\r\n    rendered_tree.update();\r\n    d3.select(rendered_tree.container).node().appendChild(rendered_tree.show());\r\n    d3.select(this.display.container).dispatch('reroot');\r\n\r\n  }\r\n\r\n  return this;\r\n\r\n}\r\n\r\nexport function rootpath(attr_name, store_name) {\r\n\r\n  attr_name = attr_name || \"attribute\";\r\n  store_name = store_name || \"y_scaled\";\r\n\r\n  if (\"parent\" in this) {\r\n    let my_value = parseFloat(this[attr_name]);\r\n\r\n    this[store_name] =\r\n      this.parent[store_name] + (isNaN(my_value) ? 0.1 : my_value);\r\n\r\n  } else {\r\n\r\n    this[store_name] = 0.0;\r\n\r\n  }\r\n\r\n  return this[store_name];\r\n\r\n}\r\n\r\nexport function pathToRoot(node) {\r\n  let selection = [];\r\n  while (node) {\r\n    selection.push(node);\r\n    node = node.parent;\r\n  }\r\n  return selection;\r\n}\r\n","export function xCoord(d) {\r\n  return d.y;\r\n}\r\n\r\nexport function yCoord(d) {\r\n  return d.x;\r\n}\r\n","import { xCoord, yCoord } from \"./coordinates\";\r\n\r\nfunction radialMapper(r, a, radial_center) {\r\n  return {\r\n    x: radial_center + r * Math.sin(a),\r\n    y: radial_center + r * Math.cos(a)\r\n  };\r\n}\r\n\r\nfunction cartesianMapper(x, y, radial_center) { // eslint-disable-line\r\n  return polarToCartesian(x - radial_center, y - radial_center);\r\n}\r\n\r\nfunction polarToCartesian(x, y) {\r\n  let r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\r\n  let a = Math.atan2(y, x);\r\n  return [r, a];\r\n}\r\n\r\nexport function cartesianToPolar(\r\n  node,\r\n  radius,\r\n  radial_root_offset,\r\n  radial_center,\r\n  scales,\r\n  size\r\n) {\r\n\r\n  node.radius = radius * (node.radius + radial_root_offset);\r\n\r\n  //if (!node.angle) {\r\n  node.angle = 2 * Math.PI * node.x * scales[0] / size[0];\r\n  //}\r\n\r\n  let radial = radialMapper(node.radius, node.angle, radial_center);\r\n\r\n  node.x = radial.x;\r\n  node.y = radial.y;\r\n\r\n  return node;\r\n\r\n}\r\n\r\nexport function drawArc(radial_center, points) {\r\n\r\n\r\n  var start = radialMapper(points[0].radius, points[0].angle, radial_center),\r\n    end = radialMapper(points[0].radius, points[1].angle, radial_center);\r\n\r\n  return (\r\n    \"M \" +\r\n    xCoord(start) +\r\n    \",\" +\r\n    yCoord(start) +\r\n    \" A \" +\r\n    points[0].radius +\r\n    \",\" +\r\n    points[0].radius +\r\n    \" 0,0, \" +\r\n    (points[1].angle > points[0].angle ? 1 : 0) +\r\n    \" \" +\r\n    xCoord(end) +\r\n    \",\" +\r\n    yCoord(end) +\r\n    \" L \" +\r\n    xCoord(points[1]) +\r\n    \",\" +\r\n    yCoord(points[1])\r\n  );\r\n}\r\n\r\nexport function arcSegmentPlacer(edge, where, radial_center) {\r\n  var r = radialMapper(\r\n    edge.target.radius + (edge.source.radius - edge.target.radius) * where,\r\n    edge.target.angle,\r\n    radial_center\r\n  );\r\n  return { x: xCoord(r), y: yCoord(r) };\r\n}\r\n","import * as d3 from \"d3\";\r\nimport { xCoord, yCoord } from \"./coordinates\";\r\n\r\nexport var draw_line = d3\r\n  .line()\r\n  .x(function(d) {\r\n    return xCoord(d);\r\n  })\r\n  .y(function(d) {\r\n    return yCoord(d);\r\n  })\r\n  .curve(d3.curveStepBefore);\r\n\r\nexport function lineSegmentPlacer(edge, where) {\r\n  return {\r\n    x:\r\n      xCoord(edge.target) +\r\n      (xCoord(edge.source) - xCoord(edge.target)) * where,\r\n    y: yCoord(edge.target)\r\n  };\r\n}\r\n\r\nexport default draw_line;\r\n","export function itemTagged(item) {\r\n  return item.tag || false;\r\n}\r\n\r\nexport function itemSelected(item, tag) {\r\n  return item[tag] || false;\r\n}\r\n","import { isLeafNode } from \"../nodes\";\r\n\r\nexport const css_classes = {\r\n  \"tree-container\": \"phylotree-container\",\r\n  \"tree-scale-bar\": \"tree-scale-bar\",\r\n  node: \"node\",\r\n  \"internal-node\": \"internal-node\",\r\n  \"tagged-node\": \"node-tagged\",\r\n  \"selected-node\": \"node-selected\",\r\n  \"collapsed-node\": \"node-collapsed\",\r\n  \"root-node\": \"root-node\",\r\n  branch: \"branch\",\r\n  \"selected-branch\": \"branch-selected\",\r\n  \"tagged-branch\": \"branch-tagged\",\r\n  \"tree-selection-brush\": \"tree-selection-brush\",\r\n  \"branch-tracer\": \"branch-tracer\",\r\n  clade: \"clade\",\r\n  node_text: \"phylotree-node-text\"\r\n};\r\n\r\nexport function internalNames(attr) {\r\n  if (!arguments.length) return this.options[\"internal-names\"];\r\n  this.options[\"internal-names\"] = attr;\r\n  return this;\r\n}\r\n\r\nexport function radial(attr) {\r\n  if (!arguments.length) return this.options[\"is-radial\"];\r\n  this.options[\"is-radial\"] = attr;\r\n  return this;\r\n}\r\n\r\nexport function alignTips(attr) {\r\n  if (!arguments.length) return this.options[\"align-tips\"];\r\n  this.options[\"align-tips\"] = attr;\r\n  return this;\r\n}\r\n\r\n/**\r\n * Return the bubble size of the current node.\r\n *\r\n * @param {Node} A node in the phylotree.\r\n * @returns {Float} The size of the bubble associated to this node.\r\n */\r\nexport function nodeBubbleSize(node) {\r\n\r\n  // if a custom bubble styler, use that instead\r\n\r\n  if(this.options[\"draw-size-bubbles\"] && this.options[\"bubble-styler\"]) {\r\n    return this.options[\"bubble-styler\"](node);\r\n  } else {\r\n    return this.options[\"draw-size-bubbles\"]\r\n      ? this.relative_nodeSpan(node) * this.scales[0] * 0.25\r\n      : 0;\r\n    }\r\n}\r\n\r\nexport function shiftTip(d) {\r\n  if (this.options[\"is-radial\"]) {\r\n    return [\r\n      (d.text_align == \"end\" ? -1 : 1) *\r\n        (this.radius_pad_for_bubbles - d.radius),\r\n      0\r\n    ];\r\n  }\r\n  if (this.options[\"right-to-left\"]) {\r\n    return [this.right_most_leaf - d.screen_x, 0];\r\n  }\r\n  return [this.right_most_leaf - d.screen_x, 0];\r\n}\r\n\r\nexport function layoutHandler(attr) {\r\n  if (!arguments.length) return this.layout_listener_handler;\r\n  this.layout_listener_handler = attr;\r\n  return this;\r\n}\r\n\r\n/**\r\n * Getter/setter for the selection label. Useful when allowing\r\n * users to make multiple selections.\r\n *\r\n * @param {String} attr (Optional) If setting, the new selection label.\r\n * @returns The current selection label if getting, or the current ``phylotree`` if setting.\r\n */\r\nexport function selectionLabel(attr) {\r\n  if (!arguments.length) return this.selection_attribute_name;\r\n  this.selection_attribute_name = attr;\r\n  this.syncEdgeLabels();\r\n  return this;\r\n}\r\n\r\n/**\r\n * Get or set the current node span. If setting, the argument should\r\n * be a function of a node which returns a number, so that node spans\r\n * can be determined dynamically. Alternatively, the argument can be the\r\n * string ``\"equal\"``, to give all nodes an equal span.\r\n *\r\n * @param {Function} attr Optional; if setting, the nodeSpan function.\r\n * @returns The ``nodeSpan`` if getting, or the current ``phylotree`` if setting.\r\n */\r\nexport function nodeSpan(attr) {\r\n  if (!arguments.length) return nodeSpan;\r\n  if (typeof attr == \"string\" && attr == \"equal\") {\r\n    nodeSpan = function(d) { // eslint-disable-line\r\n      return 1;\r\n    };\r\n  } else {\r\n    nodeSpan = attr; // eslint-disable-line\r\n  }\r\n  return this;\r\n}\r\n\r\n// List of all selecters that can be used with the restricted-selectable option\r\nexport var predefined_selecters = {\r\n  all: d => {\r\n    return true;\r\n  },\r\n  none: d => {\r\n    return false;\r\n  },\r\n  \"all-leaf-nodes\": d => {\r\n    return isLeafNode(d.target);\r\n  },\r\n  \"all-internal-nodes\": d => {\r\n    return !isLeafNode(d.target);\r\n  }\r\n};\r\n\r\n/**\r\n * Getter/setter for the selection callback. This function is called\r\n * every time the current selection is modified, and its argument is\r\n * an array of nodes that make up the current selection.\r\n *\r\n * @param {Function} callback (Optional) The selection callback function.\r\n * @returns The current ``selectionCallback`` if getting, or the current ``this`` if setting.\r\n */\r\nexport function selectionCallback(callback) {\r\n  if (!callback) return this.selectionCallback;\r\n  this.selectionCallback = callback;\r\n  return this;\r\n}\r\n","import * as d3 from \"d3\";\r\n\r\nimport { itemTagged, itemSelected } from \"./helpers\";\r\nimport { isLeafNode } from \"../nodes\";\r\nimport { css_classes } from \"./options\";\r\n\r\nexport function shiftTip(d) {\r\n\r\n  if (this.radial()) {\r\n    return [\r\n      (d.text_align == \"end\" ? -1 : 1) *\r\n        (this.radius_pad_for_bubbles - d.radius),\r\n      0\r\n    ];\r\n  }\r\n\r\n  if (this.options[\"right-to-left\"]) {\r\n    return [this.right_most_leaf - d.screen_x, 0];\r\n  }\r\n\r\n  return [this.right_most_leaf - d.screen_x, 0];\r\n\r\n}\r\n\r\nexport function drawNode(container, node, transitions) {\r\n\r\n  container = d3.select(container);\r\n  var is_leaf = isLeafNode(node);\r\n\r\n  if (is_leaf) {\r\n    container = container.attr(\"data-node-name\", node.data.name);\r\n  }\r\n\r\n  var labels = container.selectAll(\"text\").data([node]),\r\n    tracers = container.selectAll(\"line\");\r\n\r\n  if (is_leaf || (this.showInternalName(node) && !isNodeCollapsed(node))) {\r\n\r\n    labels = labels\r\n      .enter()\r\n      .append(\"text\")\r\n      .classed(this.css_classes[\"node_text\"], true)\r\n      .merge(labels)\r\n      .on(\"click\", d=> {\r\n        this.handle_node_click(node, d);\r\n      })\r\n      .attr(\"dy\", d => {\r\n        return this.shown_font_size * 0.33;\r\n      })\r\n      .text(d => {\r\n        return this.options[\"show-labels\"] ? this._nodeLabel(d) : \"\";\r\n      })\r\n      .style(\"font-size\", d => {\r\n        return this.ensure_size_is_in_px(this.shown_font_size);\r\n      });\r\n\r\n    if (this.radial()) {\r\n      labels = labels\r\n        .attr(\"transform\", d => {\r\n          return (\r\n            this.d3PhylotreeSvgRotate(d.text_angle) +\r\n            this.d3PhylotreeSvgTranslate(\r\n              this.alignTips() ? this.shiftTip(d) : null\r\n            )\r\n          );\r\n        })\r\n        .attr(\"text-anchor\", d => {\r\n          return d.text_align;\r\n        });\r\n    } else {\r\n      labels = labels.attr(\"text-anchor\", \"start\").attr(\"transform\", d => {\r\n        if (this.options[\"layout\"] == \"right-to-left\") {\r\n          return this.d3PhylotreeSvgTranslate([-20, 0]);\r\n        }\r\n        return this.d3PhylotreeSvgTranslate(\r\n          this.alignTips() ? this.shiftTip(d) : null\r\n        );\r\n      });\r\n    }\r\n\r\n    if (this.alignTips()) {\r\n      tracers = tracers.data([node]);\r\n\r\n      if (transitions) {\r\n        tracers = tracers\r\n          .enter()\r\n          .append(\"line\")\r\n          .classed(this.css_classes[\"branch-tracer\"], true)\r\n          .merge(tracers)\r\n          .attr(\"x1\", d => {\r\n            return (\r\n              (d.text_align == \"end\" ? -1 : 1) * this.nodeBubbleSize(node)\r\n            );\r\n          })\r\n          .attr(\"x2\", 0)\r\n          .attr(\"y1\", 0)\r\n          .attr(\"y2\", 0)\r\n          .attr(\"x2\", d => {\r\n            if (this.options[\"layout\"] == \"right-to-left\") {\r\n              return d.screen_x;\r\n            }\r\n\r\n            return this.shiftTip(d)[0];\r\n          })\r\n          .attr(\"transform\", d => {\r\n            return this.d3PhylotreeSvgRotate(d.text_angle);\r\n          })\r\n          .attr(\"x2\", d => {\r\n            if (this.options[\"layout\"] == \"right-to-left\") {\r\n              return d.screen_x;\r\n            }\r\n            return this.shiftTip(d)[0];\r\n          })\r\n          .attr(\"transform\", d => {\r\n            return this.d3PhylotreeSvgRotate(d.text_angle);\r\n          });\r\n      } else {\r\n        tracers = tracers\r\n          .enter()\r\n          .append(\"line\")\r\n          .classed(this.css_classes[\"branch-tracer\"], true)\r\n          .merge(tracers)\r\n          .attr(\"x1\", d => {\r\n            return (\r\n              (d.text_align == \"end\" ? -1 : 1) * this.nodeBubbleSize(node)\r\n            );\r\n          })\r\n          .attr(\"y2\", 0)\r\n          .attr(\"y1\", 0)\r\n          .attr(\"x2\", d => {\r\n            return this.shiftTip(d)[0];\r\n          });\r\n        tracers.attr(\"transform\", d => {\r\n          return this.d3PhylotreeSvgRotate(d.text_angle);\r\n        });\r\n      }\r\n    } else {\r\n      tracers.remove();\r\n    }\r\n\r\n    if (this.options[\"draw-size-bubbles\"]) {\r\n\r\n      var shift = this.nodeBubbleSize(node);\r\n\r\n      let circles = container\r\n        .selectAll(\"circle\")\r\n        .data([shift])\r\n        .enter()\r\n        .append(\"circle\");\r\n\r\n      circles.attr(\"r\", function(d) {\r\n        return d;\r\n      });\r\n\r\n      if (this.shown_font_size >= 5) {\r\n        labels = labels.attr(\"dx\", d => {\r\n          return (\r\n            (d.text_align == \"end\" ? -1 : 1) *\r\n            ((this.alignTips() ? 0 : shift) + this.shown_font_size * 0.33)\r\n          );\r\n        });\r\n      }\r\n    } else {\r\n      if (this.shown_font_size >= 5) {\r\n        labels = labels.attr(\"dx\", d => { // eslint-disable-line\r\n          return (d.text_align == \"end\" ? -1 : 1) * this.shown_font_size * 0.33;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!is_leaf) {\r\n    let circles = container\r\n        .selectAll(\"circle\")\r\n        .data([node])\r\n        .enter()\r\n        .append(\"circle\"),\r\n      radius = this.node_circle_size()(node);\r\n\r\n    if (radius > 0) {\r\n      circles\r\n        .merge(circles)\r\n        .attr(\"r\", d => {\r\n          return Math.min(this.shown_font_size * 0.75, radius);\r\n        })\r\n        .on(\"click\", d => {\r\n          this.handle_node_click(node, d);\r\n        });\r\n    } else {\r\n      circles.remove();\r\n    }\r\n  }\r\n\r\n  if (this.node_styler) {\r\n    this.node_styler(container, node);\r\n  }\r\n\r\n  return node;\r\n}\r\n\r\nexport function updateHasHiddenNodes() {\r\n  let nodes = this.phylotree.nodes.descendants();\r\n\r\n  for (let k = nodes.length - 1; k >= 0; k -= 1) {\r\n    if (isLeafNode(nodes[k])) {\r\n      nodes[k].hasHiddenNodes = nodes[k].notshown;\r\n    } else {\r\n      nodes[k].hasHiddenNodes = nodes[k].children.reduce(function(p, c) {\r\n        return c.notshown || p;\r\n      }, false);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nexport function showInternalName(node) {\r\n\r\n  const i_names = this.internalNames();\r\n\r\n  if (i_names) {\r\n    if (typeof i_names === \"function\") {\r\n      return i_names(node);\r\n    }\r\n    return i_names;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get or set the current node span. If setting, the argument should\r\n * be a function of a node which returns a number, so that node spans\r\n * can be determined dynamically. Alternatively, the argument can be the\r\n * string ``\"equal\"``, to give all nodes an equal span.\r\n *\r\n * @param {Function} attr Optional; if setting, the nodeSpan function.\r\n * @returns The ``nodeSpan`` if getting, or the current ``phylotree`` if setting.\r\n */\r\nexport function nodeSpan(attr) {\r\n  if (!arguments.length) return this.nodeSpan;\r\n  if (typeof attr == \"string\" && attr == \"equal\") {\r\n    this.nodeSpan = function(d) {\r\n      return 1;\r\n    };\r\n  } else {\r\n    this.nodeSpan = attr;\r\n  }\r\n  return this;\r\n}\r\n\r\nexport function reclassNode(node) {\r\n\r\n  let class_var = css_classes[isLeafNode(node) ? \"node\" : \"internal-node\"];\r\n\r\n  if (itemTagged(node)) {\r\n    class_var += \" \" + css_classes[\"tagged-node\"];\r\n  }\r\n\r\n  if (itemSelected(node, this.selection_attribute_name)) {\r\n    class_var += \" \" + css_classes[\"selected-node\"];\r\n  }\r\n\r\n  if (!node[\"parent\"]) {\r\n    class_var += \" \" + css_classes[\"root-node\"];\r\n  }\r\n\r\n  if (isNodeCollapsed(node) || hasHiddenNodes(node)) {\r\n    class_var += \" \" + css_classes[\"collapsed-node\"];\r\n  }\r\n\r\n  return class_var;\r\n}\r\n\r\nexport function nodeVisible(node) {\r\n  return !(node.hidden || node.notshown || false);\r\n}\r\n\r\nexport function nodeNotshown(node) {\r\n  return node.notshown;\r\n}\r\n\r\nexport function hasHiddenNodes(node) {\r\n  return node.hasHiddenNodes || false;\r\n}\r\n\r\nexport function isNodeCollapsed(node) {\r\n  return node.collapsed || false;\r\n}\r\n\r\nexport function nodeCssSelectors(css_classes) {\r\n  return [\r\n    css_classes[\"node\"],\r\n    css_classes[\"internal-node\"],\r\n    css_classes[\"collapsed-node\"],\r\n    css_classes[\"tagged-node\"],\r\n    css_classes[\"root-node\"]\r\n  ].reduce(function(p, c, i, a) {\r\n    return (p += \"g.\" + c + (i < a.length - 1 ? \",\" : \"\"));\r\n  }, \"\");\r\n}\r\n\r\nexport function internalLabel(callback, respect_existing) {\r\n\r\n  this.phylotree.clearInternalNodes(respect_existing);\r\n\r\n  for (var i = this.phylotree.nodes.descendants().length - 1; i >= 0; i--) {\r\n\r\n    var d = this.phylotree.nodes.descendants()[i];\r\n\r\n    if (!(isLeafNode(d) || itemSelected(d, this.selection_attribute_name))) {\r\n      d[this.selection_attribute_name] = callback(d.children);\r\n    }\r\n\r\n  }\r\n\r\n  this.modifySelection((d, callback) => {\r\n    if (isLeafNode(d.target)) {\r\n      return d.target[this.selection_attribute_name];\r\n    }\r\n    return d.target[this.selection_attribute_name];\r\n  });\r\n}\r\n\r\nexport function defNodeLabel(_node) {\r\n\r\n  _node = _node.data;\r\n\r\n  if (isLeafNode(_node)) {\r\n    return _node.name || \"\";\r\n  }\r\n\r\n  if (this.showInternalName(_node)) {\r\n    return _node.name;\r\n  }\r\n\r\n  return \"\";\r\n\r\n}\r\n\r\n/**\r\n * Get or set nodeLabel accessor.\r\n *\r\n * @param {Function} attr (Optional) If setting, a function that accesses a branch name\r\n * from a node.\r\n * @returns The ``nodeLabel`` accessor if getting, or the current ``this`` if setting.\r\n */\r\nexport function nodeLabel(attr) {\r\n  if (!arguments.length) return this._nodeLabel;\r\n  this._nodeLabel = attr ? attr : defNodeLabel;\r\n\tthis.update();\r\n  return this;\r\n}\r\n\r\n\r\n","import * as d3 from \"d3\";\r\nimport * as _ from \"underscore\";\r\nimport { isNodeCollapsed } from \"./nodes\";\r\n\r\nexport function cladeCssSelectors(css_classes) {\r\n  return [css_classes[\"clade\"]].reduce(function(p, c, i, a) {\r\n    return (p += \"path.\" + c + (i < a.length - 1 ? \",\" : \"\"));\r\n  }, \"\");\r\n}\r\n\r\nexport function updateCollapsedClades(transitions) {\r\n\r\n  let enclosure = this.svg.selectAll(\".\" + this.css_classes[\"tree-container\"]);\r\n  var node_id = 0;\r\n\r\n  let collapsed_clades = enclosure\r\n    .selectAll(cladeCssSelectors(this.css_classes))\r\n    .data(\r\n      this.phylotree.nodes.descendants().filter(isNodeCollapsed),\r\n      function(d) {\r\n        return d.id || (d.id = ++node_id);\r\n      }\r\n    );\r\n\r\n  let spline = function() {};\r\n  let spline_f = _.noop();\r\n\r\n  // Collapse radial differently\r\n  if (this.radial()) {\r\n    spline = d3\r\n      .line()\r\n      .curve(d3.curveBasis)\r\n      .y(function(d) {\r\n        return d[0];\r\n      })\r\n      .x(function(d) {\r\n        return d[1];\r\n      });\r\n\r\n    spline_f = function(coord, i, d, init_0, init_1) {\r\n      if (i) {\r\n        return [\r\n          d.screen_y + (coord[0] - init_0) / 50,\r\n          d.screen_x + (coord[1] - init_1) / 50\r\n        ];\r\n      } else {\r\n        return [d.screen_y, d.screen_x];\r\n      }\r\n    };\r\n  } else {\r\n    spline = d3\r\n      .line()\r\n      .y(function(d) {\r\n        return d[0];\r\n      })\r\n      .x(function(d) {\r\n        return d[1];\r\n      }).curve(d3.curveBasis);\r\n\r\n    spline_f = function(coord, i, d, init_0, init_1) {\r\n      if (i) {\r\n         return [\r\n          d.screen_y + (coord[0] - init_0) / 50 ,\r\n          d.screen_x + (coord[1] - init_1) / 50,\r\n        ];\r\n      } else {\r\n        return [d.screen_y, d.screen_x];\r\n      }\r\n    };\r\n  }\r\n\r\n  collapsed_clades\r\n    .exit()\r\n    .each(function(d) {\r\n      d.collapsed_clade = null;\r\n    })\r\n    .remove();\r\n\r\n  if (transitions) {\r\n    collapsed_clades\r\n      .enter()\r\n      .insert(\"path\", \":first-child\")\r\n      .attr(\"class\", this.css_classes[\"clade\"])\r\n      .merge(collapsed_clades)\r\n      .attr(\"d\", function(d) {\r\n        if (d.collapsed_clade) {\r\n          return d.collapsed_clade;\r\n        }\r\n\r\n        //console.log (d.collapsed);\r\n        let init_0 = d.collapsed[0][0];\r\n        let init_1 = d.collapsed[0][1];\r\n        \r\n\r\n  \r\n        // #1 return spline(d.collapsed.map(spline_f, d, init_0, init_1));\r\n        return spline(\r\n          d.collapsed.map(function(coord, i) {\r\n            return spline_f(coord, i, d, init_0, init_1);\r\n          })\r\n        );\r\n      })\r\n      .attr(\"d\", function(d) {        \r\n        return (d.collapsed_clade = spline(d.collapsed));\r\n      });\r\n  } else {\r\n    collapsed_clades\r\n      .enter()\r\n      .insert(\"path\", \":first-child\")\r\n      .attr(\"class\", this.css_classes[\"clade\"])\r\n      .merge(collapsed_clades)\r\n      .attr(\"d\", function(d) {\r\n        return (d.collapsed_clade ? d.collapsed_clade : d.collapsed_clade = spline(d.collapsed));\r\n      });\r\n  }\r\n}\r\n","import * as d3 from \"d3\";\r\nimport { itemTagged, itemSelected } from \"./helpers\";\r\nimport { css_classes } from \"./options\";\r\n\r\nexport function drawEdge(container, edge, transition) {\r\n\r\n  container = d3.select(container);\r\n\r\n  container = container\r\n    .attr(\"class\", d => {\r\n      return this.reclassEdge(d);\r\n    })\r\n    .on(\"click\", d => {\r\n      this.modifySelection([edge.target], this.selection_attribute_name);\r\n      this.update();\r\n    });\r\n\r\n  let new_branch_path = this.draw_branch([edge.source, edge.target]);\r\n\r\n  if (transition) {\r\n\r\n    if (container.datum().existing_path) {\r\n      container = container.attr(\"d\", function(d) {\r\n        return d.existing_path;\r\n      });\r\n    }\r\n\r\n    container = container.attr(\"d\", new_branch_path);\r\n\r\n  } else {\r\n    container = container.attr(\"d\", new_branch_path);\r\n  }\r\n\r\n  edge.existing_path = new_branch_path;\r\n\r\n  var bl = this.phylotree.branch_length_accessor(edge.target);\r\n\r\n  if (bl !== undefined) {\r\n    var haz_title = container.selectAll(\"title\");\r\n\r\n    if (haz_title.empty()) {\r\n      haz_title = container.append(\"title\");\r\n    }\r\n    haz_title.text(\"Length = \" + bl);\r\n  } else {\r\n    container.selectAll(\"title\").remove();\r\n  }\r\n\r\n  if (this.edge_styler) {\r\n    this.edge_styler(container, edge, transition);\r\n  }\r\n\r\n  return this.phylotree;\r\n\r\n}\r\n\r\nexport function reclassEdge(edge) {\r\n\r\n  let class_var = css_classes[\"branch\"];\r\n\r\n  if (itemTagged(edge)) {\r\n    class_var += \" \" + css_classes[\"tagged-branch\"];\r\n  }\r\n\r\n  if (itemSelected(edge, this.selection_attribute_name)) {\r\n    class_var += \" \" + css_classes[\"selected-branch\"];\r\n  }\r\n\r\n  return class_var;\r\n\r\n}\r\n\r\nexport function initializeEdgeLabels() {\r\n\r\n  this.links.forEach(d => {\r\n\r\n    // TODO: Move away from storing attribute data as root (BREAKS occasionally with d3>3)\r\n    if(d.target.data.annotation) {\r\n      d.target[d.target.data.annotation] = d.target.data.annotation;\r\n    }\r\n\r\n  });\r\n\r\n}\r\n\r\n\r\nexport function syncEdgeLabels() {\r\n\r\n  this.links.forEach(d => {\r\n\r\n    // TODO: Move away from storing attribute data as root (BREAKS occasionally with d3>3)\r\n    d[this.selection_attribute_name] =\r\n      d.target[this.selection_attribute_name] || false;\r\n    d.tag = d.target.tag || false;\r\n\r\n  });\r\n\r\n  if (this.countHandler()) {\r\n\r\n    let counts = {};\r\n\r\n    counts[\r\n      this.selection_attribute_name\r\n    ] = this.links.reduce((p, c) => {\r\n      return p + (c[this.selection_attribute_name] ? 1 : 0);\r\n    }, 0);\r\n\r\n    counts[\"tagged\"] = this.links.reduce(function(p, c) {\r\n      return p + (itemTagged(c) ? 1 : 0);\r\n    }, 0);\r\n\r\n    this.countUpdate(this, counts, this.countHandler());\r\n\r\n  }\r\n\r\n}\r\n\r\nexport function edgeVisible(edge) {\r\n  return !(edge.target.hidden || edge.target.notshown || false);\r\n}\r\n\r\nexport function edgeCssSelectors(css_classes) {\r\n  return [\r\n    css_classes[\"branch\"],\r\n    css_classes[\"selected-branch\"],\r\n    css_classes[\"tagged-branch\"]\r\n  ].reduce(function(p, c, i, a) {\r\n    return (p += \"path.\" + c + (i < a.length - 1 ? \",\" : \"\"));\r\n  }, \"\");\r\n}\r\n\r\nexport function placeAlongAnEdge (e, where) {\r\n    return this.edge_placer (e, where);\r\n}\r\n","import { isLeafNode } from \"../nodes\";\r\nimport { css_classes } from \"./options\";\r\n\r\nlet d3_layout_phylotree_event_id = \"phylotree.event\";\r\n\r\n/**\r\n * Toggle collapsed view of a given node. Either collapses a clade into\r\n * a smaller blob for viewing large trees, or expands a node that was\r\n * previously collapsed.\r\n *\r\n * @param {Node} node The node to toggle.\r\n * @returns {Phylotree} The current ``phylotree``.\r\n */\r\nexport function toggleCollapse(node) {\r\n  if (node.collapsed) {\r\n    node.collapsed = false;\r\n\r\n    let unhide = function(n) {\r\n      if (!isLeafNode(n)) {\r\n        if (!n.collapsed) {\r\n          n.children.forEach(unhide);\r\n        }\r\n      }\r\n      n.hidden = false;\r\n    };\r\n\r\n    unhide(node);\r\n  } else {\r\n    node.collapsed = true;\r\n  }\r\n\r\n  this.placenodes();\r\n  return this;\r\n}\r\n\r\nexport function resizeSvg(tree, svg, tr) {\r\n\r\n  let sizes = this.size;\r\n\r\n  if (this.radial()) {\r\n    let pad_radius = this.pad_width(),\r\n      vertical_offset =\r\n        this.options[\"top-bottom-spacing\"] != \"fit-to-size\"\r\n          ? this.pad_height()\r\n          : 0;\r\n\r\n    sizes = [\r\n      sizes[1] + 2 * pad_radius,\r\n      sizes[0] + 2 * pad_radius + vertical_offset\r\n    ];\r\n\r\n    if (svg) {\r\n      svg\r\n        .selectAll(\".\" + css_classes[\"tree-container\"])\r\n        .attr(\r\n          \"transform\",\r\n          \"translate (\" +\r\n            pad_radius +\r\n            \",\" +\r\n            (pad_radius + vertical_offset) +\r\n            \")\"\r\n        );\r\n    }\r\n  } else {\r\n\r\n    sizes = [\r\n      sizes[0] +\r\n        (this.options[\"top-bottom-spacing\"] != \"fit-to-size\"\r\n          ? this.pad_height()\r\n          : 0),\r\n      sizes[1] +\r\n        (this.options[\"left-right-spacing\"] != \"fit-to-size\"\r\n          ? this.pad_width()\r\n          : 0)\r\n    ];\r\n\r\n  }\r\n\r\n  if (svg) {\r\n\r\n    if (tr) {\r\n      svg = svg.transition(100);\r\n    }\r\n\r\n    svg.attr(\"height\", sizes[0]).attr(\"width\", sizes[1]);\r\n\r\n  }\r\n\r\n  this.size = sizes;\r\n\r\n  return sizes;\r\n\r\n}\r\n\r\nexport function rescale(scale, attr_name) {\r\n  attr_name = attr_name || \"y_scaled\";\r\n  if (attr_name in this) {\r\n    this[attr_name] *= scale;\r\n  }\r\n}\r\n\r\nexport function triggerRefresh(tree) {\r\n\r\n  var event = new CustomEvent(d3_layout_phylotree_event_id, {\r\n    detail: [\"refresh\", tree]\r\n  });\r\n\r\n  document.dispatchEvent(event);\r\n\r\n}\r\n\r\nexport function countUpdate(tree, counts) {\r\n  var event = new CustomEvent(d3_layout_phylotree_event_id, {\r\n    detail: [\"countUpdate\", counts, tree.countHandler()]\r\n  });\r\n  document.dispatchEvent(event);\r\n}\r\n\r\nexport function d3PhylotreeTriggerLayout(tree) {\r\n  var event = new CustomEvent(d3_layout_phylotree_event_id, {\r\n    detail: [\"layout\", tree, tree.layoutHandler()]\r\n  });\r\n  document.dispatchEvent(event);\r\n}\r\n\r\nexport function d3PhylotreeEventListener(event) {\r\n  switch (event.detail[0]) {\r\n    case \"refresh\":\r\n      event.detail[1].refresh();\r\n      break;\r\n    case \"countUpdate\":\r\n      event.detail[2](event.detail[1]);\r\n      break;\r\n    case \"layout\":\r\n      event.detail[2](event.detail[1]);\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function d3PhylotreeAddEventListener() {\r\n  document.addEventListener(\r\n    d3_layout_phylotree_event_id,\r\n    d3PhylotreeEventListener,\r\n    false\r\n  );\r\n}\r\n\r\nexport function d3PhylotreeSvgTranslate(x) {\r\n  if (x && (x[0] !== null || x[1] !== null))\r\n    return (\r\n      \"translate (\" +\r\n      (x[0] !== null ? x[0] : 0) +\r\n      \",\" +\r\n      (x[1] !== null ? x[1] : 0) +\r\n      \") \"\r\n    );\r\n\r\n  return \"\";\r\n}\r\n\r\nexport function d3PhylotreeSvgRotate(a) {\r\n  if (a !== null) {\r\n    return \"rotate (\" + a + \") \";\r\n  }\r\n  return \"\";\r\n}\r\n","import * as d3 from \"d3\";\r\nimport * as _ from \"underscore\";\r\nimport * as events from \"./events\";\r\nimport { isLeafNode } from \"../nodes\";\r\nimport { isNodeCollapsed, hasHiddenNodes } from \"./nodes\";\r\nimport { predefined_selecters } from \"./options\";\r\n\r\nlet d3_layout_phylotree_context_menu_id = \"d3_layout_phylotree_context_menu\";\r\n\r\nexport function nodeDropdownMenu(node, container, phylotree, options, event) {\r\n  let menu_object = d3\r\n    .select(container)\r\n    .select(\"#\" + d3_layout_phylotree_context_menu_id);\r\n\r\n  if (menu_object.empty()) {\r\n    menu_object = d3\r\n      .select(container)\r\n      .append(\"div\")\r\n      .attr(\"id\", d3_layout_phylotree_context_menu_id)\r\n      .attr(\"class\", \"dropdown-menu\")\r\n      .attr(\"role\", \"menu\");\r\n  }\r\n\r\n  menu_object.selectAll(\"a\").remove();\r\n  menu_object.selectAll(\"h6\").remove();\r\n  menu_object.selectAll(\"div\").remove();\r\n\r\n  if (node) {\r\n    if (\r\n      !_.some([\r\n        Boolean(node.menu_items),\r\n        options[\"hide\"],\r\n        options[\"selectable\"],\r\n        options[\"collapsible\"]\r\n      ]) ||\r\n      !options[\"show-menu\"]\r\n    )\r\n      return;\r\n    if (!isLeafNode(node)) {\r\n      if (options[\"collapsible\"]) {\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(isNodeCollapsed(node) ? \"Expand Subtree\" : \"Collapse Subtree\")\r\n          .on(\"click\", d => {\r\n            menu_object.style(\"display\", \"none\");\r\n            this.toggleCollapse(node).update();\r\n          });\r\n        if (options[\"selectable\"]) {\r\n          menu_object.append(\"div\").attr(\"class\", \"dropdown-divider\");\r\n          menu_object\r\n            .append(\"h6\")\r\n            .attr(\"class\", \"dropdown-header\")\r\n            .text(\"Toggle selection\");\r\n        }\r\n      }\r\n\r\n      if (options[\"selectable\"]) {\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"All descendant branches\")\r\n          .on(\"click\", function(d) {\r\n            menu_object.style(\"display\", \"none\");\r\n            phylotree.modifySelection(\r\n              phylotree.selectAllDescendants(node, true, true)\r\n            );\r\n          });\r\n\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"All terminal branches\")\r\n          .on(\"click\", function(d) {\r\n            menu_object.style(\"display\", \"none\");\r\n            phylotree.modifySelection(\r\n              phylotree.selectAllDescendants(node, true, false)\r\n            );\r\n          });\r\n\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"All internal branches\")\r\n          .on(\"click\", function(d) {\r\n            menu_object.style(\"display\", \"none\");\r\n            phylotree.modifySelection(\r\n              phylotree.selectAllDescendants(node, false, true)\r\n            );\r\n          });\r\n      }\r\n    }\r\n\r\n    if (node.parent) {\r\n      if (options[\"selectable\"]) {\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"Incident branch\")\r\n          .on(\"click\", function(d) {\r\n            menu_object.style(\"display\", \"none\");\r\n            phylotree.modifySelection([node]);\r\n          });\r\n\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"Path to root\")\r\n          .on(\"click\", d => {\r\n            menu_object.style(\"display\", \"none\");\r\n            this.modifySelection(this.phylotree.pathToRoot(node));\r\n          });\r\n\r\n        if (options[\"reroot\"] || options[\"hide\"]) {\r\n          menu_object.append(\"div\").attr(\"class\", \"dropdown-divider\");\r\n        }\r\n      }\r\n\r\n      if (options[\"reroot\"]) {\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"Reroot on this node\")\r\n          .on(\"click\", d => {\r\n            menu_object.style(\"display\", \"none\");\r\n            this.phylotree.reroot(node);\r\n            this.update();\r\n          });\r\n      }\r\n\r\n      if (options[\"hide\"]) {\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text(\"Hide this \" + (isLeafNode(node) ? \"node\" : \"subtree\"))\r\n          .on(\"click\", d => {\r\n            menu_object.style(\"display\", \"none\");\r\n            this.modifySelection([node], \"notshown\", true, true)\r\n              .updateHasHiddenNodes()\r\n              .update();\r\n          });\r\n      }\r\n    }\r\n\r\n    if (hasHiddenNodes(node)) {\r\n      menu_object\r\n        .append(\"a\")\r\n        .attr(\"class\", \"dropdown-item\")\r\n        .attr(\"tabindex\", \"-1\")\r\n        .text(\"Show all descendant nodes\")\r\n        .on(\"click\", function(d) {\r\n          menu_object.style(\"display\", \"none\");\r\n          phylotree\r\n            .modifySelection(\r\n              phylotree.selectAllDescendants(node, true, true),\r\n              \"notshown\",\r\n              true,\r\n              true,\r\n              \"false\"\r\n            )\r\n            .updateHasHiddenNodes()\r\n            .update();\r\n        });\r\n    }\r\n\r\n    // now see if we need to add user defined menus\r\n\r\n    var has_user_elements = [];\r\n    if (\"menu_items\" in node && typeof node[\"menu_items\"] === \"object\") {\r\n      node[\"menu_items\"].forEach(function(d) {\r\n        if (d.length == 3) {\r\n          if (!d[2] || d[2](node)) {\r\n            has_user_elements.push([d[0], d[1]]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    if (has_user_elements.length) {\r\n      const show_divider_options = [\r\n        options[\"hide\"],\r\n        options[\"selectable\"],\r\n        options[\"collapsible\"]\r\n      ];\r\n\r\n      if (_.some(show_divider_options)) {\r\n        menu_object.append(\"div\").attr(\"class\", \"dropdown-divider\");\r\n      }\r\n\r\n      has_user_elements.forEach(function(d) {\r\n        menu_object\r\n          .append(\"a\")\r\n          .attr(\"class\", \"dropdown-item\")\r\n          .attr(\"tabindex\", \"-1\")\r\n          .text((d[0])(node)) // eslint-disable-line\r\n          .on(\"click\", _.partial(d[1], node));\r\n      });\r\n    }\r\n\r\n    let tree_container = document.querySelector(container); // eslint-disable-line\r\n    let rect = tree_container.getBoundingClientRect();\r\n   \r\n    menu_object\r\n      .style(\"position\", \"absolute\")\r\n      .style(\"left\", \"\" + (event.clientX - rect.x + 12 ) + \"px\")\r\n      .style(\"top\", \"\" + (event.clientY - rect.y ) + \"px\")\r\n      .style(\"display\", \"block\");\r\n  } else {\r\n    menu_object.style(\"display\", \"none\");\r\n  }\r\n\r\n}\r\n\r\nexport function addCustomMenu(node, name, callback, condition) {\r\n  if (!(\"menu_items\" in node)) {\r\n    node[\"menu_items\"] = [];\r\n  }\r\n  if (\r\n    !node[\"menu_items\"].some(function(d) {\r\n      return d[0] == name && d[1] == callback && d[2] == condition;\r\n    })\r\n  ) {\r\n    node[\"menu_items\"].push([name, callback, condition]);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * Modify the current selection, via functional programming.\r\n *\r\n * @param {Function} node_selecter A function to apply to each node, which\r\n * determines whether they become part of the current selection. Alternatively,\r\n * if ``restricted-selectable`` mode is enabled, a string describing one of\r\n * the pre-defined restricted-selectable options.\r\n * @param {String} attr (Optional) The selection attribute to modify.\r\n * @param {Boolean} place (Optional) Whether or not ``placenodes`` should be called.\r\n * @param {Boolean} skip_refresh (Optional) Whether or not a refresh is called.\r\n * @param {String} mode (Optional) Can be ``\"toggle\"``, ``\"true\"``, or ``\"false\"``.\r\n * @returns The current ``this``.\r\n *\r\n */\r\nexport function modifySelection(\r\n  node_selecter,\r\n  attr,\r\n  place,\r\n  skip_refresh,\r\n  mode\r\n) {\r\n\r\n  attr = attr || this.selection_attribute_name;\r\n  mode = mode || \"toggle\";\r\n\r\n  // check if node_selecter is a value of pre-defined selecters\r\n\r\n  if (this.options[\"restricted-selectable\"].length) {\r\n    // the selection must be from a list of pre-determined selections\r\n    if (_.contains(_.keys(predefined_selecters), node_selecter)) {\r\n      node_selecter = predefined_selecters[node_selecter];\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (\r\n    (this.options[\"restricted-selectable\"] || this.options[\"selectable\"]) &&\r\n    !this.options[\"binary-selectable\"]\r\n  ) {\r\n    var do_refresh = false;\r\n\r\n    if (typeof node_selecter === \"function\") {\r\n      this.links.forEach(function(d) {\r\n        let select_me = node_selecter(d);\r\n        d[attr] = d[attr] || false;\r\n        if (d[attr] != select_me) {\r\n          d[attr] = select_me;\r\n          do_refresh = true;\r\n          d.target[attr] = select_me;\r\n        }\r\n      });\r\n    } else {\r\n      node_selecter.forEach(function(d) {\r\n        var new_value;\r\n        switch (mode) {\r\n          case \"true\":\r\n            new_value = true;\r\n            break;\r\n          case \"false\":\r\n            new_value = false;\r\n            break;\r\n          default:\r\n            new_value = !d[attr];\r\n            break;\r\n        }\r\n\r\n        if (d[attr] != new_value) {\r\n          d[attr] = new_value;\r\n          do_refresh = true;\r\n        }\r\n      });\r\n\r\n      this.links.forEach(function(d) {\r\n        d[attr] = d.target[attr];\r\n      });\r\n    }\r\n\r\n    var counts;\r\n\r\n    if (do_refresh) {\r\n      if (!skip_refresh) {\r\n        events.triggerRefresh(this);\r\n      }\r\n      if (this.countHandler) {\r\n        counts = {};\r\n        counts[attr] = this.links.reduce(function(p, c) {\r\n          return p + (c[attr] ? 1 : 0);\r\n        }, 0);\r\n        events.countUpdate(this, counts, this.countHandler);\r\n      }\r\n\r\n      if (place) {\r\n        this.placenodes();\r\n      }\r\n    }\r\n  } else if (this.options[\"binary-selectable\"]) {\r\n    if (typeof node_selecter === \"function\") {\r\n      this.links.forEach(function(d) {\r\n        var select_me = node_selecter(d);\r\n        d[attr] = d[attr] || false;\r\n\r\n        if (d[attr] != select_me) {\r\n          d[attr] = select_me;\r\n          do_refresh = true;\r\n          d.target[attr] = select_me;\r\n        }\r\n\r\n        this.options[\"attribute-list\"].forEach(function(type) {\r\n          if (type != attr && d[attr] === true) {\r\n            d[type] = false;\r\n            d.target[type] = false;\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      node_selecter.forEach(function(d) {\r\n        var new_value;\r\n        new_value = !d[attr];\r\n\r\n        if (d[attr] != new_value) {\r\n          d[attr] = new_value;\r\n          do_refresh = true;\r\n        }\r\n      });\r\n\r\n      this.links.forEach(function(d) {\r\n        d[attr] = d.target[attr];\r\n        this.options[\"attribute-list\"].forEach(function(type) {\r\n          if (type != attr && d[attr] !== true) {\r\n            d[type] = false;\r\n            d.target[type] = false;\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    if (do_refresh) {\r\n      if (!skip_refresh) {\r\n        events.triggerRefresh(this);\r\n      }\r\n      if (this.countHandler()) {\r\n        counts = {};\r\n        counts[attr] = this.links.reduce(function(p, c) {\r\n          return p + (c[attr] ? 1 : 0);\r\n        }, 0);\r\n        this.countUpdate(this, counts, this.countHandler());\r\n      }\r\n\r\n      if (place) {\r\n        this.placenodes();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (this.selectionCallback && attr != \"tag\") {\r\n    this.selectionCallback(this.getSelection());\r\n  }\r\n\r\n  this.refresh();\r\n  this.update();\r\n  return this;\r\n}\r\n\r\n/**\r\n * Get nodes which are currently selected.\r\n *\r\n * @returns {Array} An array of nodes that match the current selection.\r\n */\r\nexport function getSelection() {\r\n  return this.nodes.filter(d => {\r\n    return d[this.selection_attribute_name];\r\n  });\r\n}\r\n\r\n/**\r\n * Select all descendents of a given node, with options for selecting\r\n * terminal/internal nodes.\r\n *\r\n * @param {Node} node The node whose descendents should be selected.\r\n * @param {Boolean} terminal Whether to include terminal nodes.\r\n * @param {Boolean} internal Whther to include internal nodes.\r\n * @returns {Array} An array of selected nodes.\r\n */\r\nexport function selectAllDescendants(node, terminal, internal) {\r\n  let selection = [];\r\n\r\n  function sel(d) {\r\n    if (isLeafNode(d)) {\r\n      if (terminal) {\r\n        if (d != node) selection.push(d);\r\n      }\r\n    } else {\r\n      if (internal) {\r\n        if (d != node) selection.push(d);\r\n      }\r\n      d.children.forEach(sel);\r\n    }\r\n  }\r\n\r\n  sel(node);\r\n  return selection;\r\n}\r\n\r\n/**\r\n * Getter/setter for the selection callback. This function is called\r\n * every time the current selection is modified, and its argument is\r\n * an array of nodes that make up the current selection.\r\n *\r\n * @param {Function} callback (Optional) The selection callback function.\r\n * @returns The current ``selectionCallback`` if getting, or the current ``this`` if setting.\r\n */\r\nexport function selectionCallback(callback) {\r\n  if (!callback) return this.selectionCallback;\r\n  this.selectionCallback = callback;\r\n  return this;\r\n}\r\n","import * as d3 from \"d3\";\r\nimport * as _ from \"underscore\";\r\n\r\nimport { drawArc, cartesianToPolar, arcSegmentPlacer } from \"./radial\";\r\nimport { default as draw_line, lineSegmentPlacer } from \"./cartesian\";\r\nimport { isLeafNode } from \"../nodes\";\r\nimport { xCoord, yCoord } from \"./coordinates\";\r\nimport * as clades from \"./clades\";\r\nimport * as render_nodes from \"./nodes\";\r\nimport * as render_edges from \"./edges\";\r\nimport * as events from \"./events\";\r\nimport { css_classes } from \"./options\";\r\nimport * as opt from \"./options\";\r\nimport * as menus from \"./menus\";\r\n\r\n// replacement for d3.functor\r\nfunction constant(x) {\r\n  return function() {\r\n    return x;\r\n  };\r\n}\r\n\r\nclass TreeRender {\r\n  constructor(phylotree, options = {}) {\r\n    this.css_classes = css_classes;\r\n    this.phylotree = phylotree;\r\n    this.container = options.container;\r\n    this.separation = function(_node, _previous) {\r\n      return 0;\r\n    };\r\n\r\n    this._nodeLabel = this.defNodeLabel;\r\n    this.svg = null;\r\n    this.selectionCallback = null;\r\n    this.scales = [1, 1];\r\n    this.size = [1, 1];\r\n    this.fixed_width = [14, 30];\r\n    this.font_size = 12;\r\n    this.scale_bar_font_size = 12;\r\n    this.offsets = [0, this.font_size / 2];\r\n\r\n    this.draw_branch = draw_line;\r\n    this.draw_scale_bar = null;\r\n    this.edge_placer = lineSegmentPlacer;\r\n    this.count_listener_handler = function() {};\r\n    this.layout_listener_handler = function() {};\r\n    this.node_styler = undefined;\r\n    this.edge_styler = undefined;\r\n    this.shown_font_size = this.font_size;\r\n    this.selection_attribute_name = \"selected\";\r\n    this.right_most_leaf = 0;\r\n    this.label_width = 0;\r\n    this.radial_center = 0;\r\n    this.radius = 1;\r\n    this.radius_pad_for_bubbles = 0;\r\n    this.rescale_nodeSpan = 1;\r\n    this.relative_nodeSpan = function(_node) {\r\n      return this.nodeSpan(_node) / this.rescale_nodeSpan;\r\n    };\r\n\r\n    let default_options = {\r\n      layout: \"left-to-right\",\r\n      logger: console,\r\n      branches: \"step\",\r\n      scaling: true,\r\n      bootstrap: false,\r\n      \"color-fill\": true,\r\n      \"internal-names\": false,\r\n      selectable: true,\r\n      // restricted-selectable can take an array of predetermined\r\n      // selecters that are defined in phylotree.predefined_selecters\r\n      // only the defined functions will be allowed when selecting\r\n      // branches\r\n      \"restricted-selectable\": false,\r\n      collapsible: true,\r\n      \"left-right-spacing\": \"fixed-step\", //'fit-to-size',\r\n      \"top-bottom-spacing\": \"fixed-step\",\r\n      \"left-offset\": 0,\r\n      \"show-scale\": \"top\",\r\n      // currently not implemented to support any other positioning\r\n      \"draw-size-bubbles\": false,\r\n      \"bubble-styler\": this.radius_pad_for_bubbles,\r\n      \"binary-selectable\": false,\r\n      \"is-radial\": false,\r\n      \"attribute-list\": [],\r\n      \"max-radius\": 768,\r\n      \"annular-limit\": 0.38196601125010515,\r\n      compression: 0.2,\r\n      \"align-tips\": false,\r\n      \"maximum-per-node-spacing\": 100,\r\n      \"minimum-per-node-spacing\": 2,\r\n      \"maximum-per-level-spacing\": 100,\r\n      \"minimum-per-level-spacing\": 10,\r\n      node_circle_size: constant(3),\r\n      transitions: null,\r\n      brush: true,\r\n      reroot: true,\r\n      hide: true,\r\n      \"label-nodes-with-name\": false,\r\n      zoom: false,\r\n      \"show-menu\": true,\r\n      \"show-labels\": true,\r\n      \"node-styler\": null,\r\n      \"edge-styler\": null,\r\n      \"node-span\": null\r\n    };\r\n\r\n    this.ensure_size_is_in_px = function(value) {\r\n      return typeof value === \"number\" ? value + \"px\" : value;\r\n    };\r\n\r\n    this.options = _.defaults(options, default_options);\r\n\r\n    this.width = this.options.width || 800;\r\n    this.height = this.options.height || 600;\r\n\r\n    this.node_styler = this.options['node-styler'];\r\n    this.edge_styler = this.options['edge-styler'];\r\n\r\n    this.nodeSpan = this.options['node-span'];\r\n\r\n    if(!this.nodeSpan) {\r\n      this.nodeSpan = function(_node) {\r\n        return 1;\r\n      };\r\n    }\r\n\r\n    this.rescale_nodeSpan =\r\n      this.phylotree.nodes.children\r\n        .map(d => {\r\n          if (isLeafNode(d) || this.showInternalName(d))\r\n            return this.nodeSpan(d);\r\n        })\r\n        .reduce(function(p, c) {\r\n          return Math.min(c, p || 1e200);\r\n        }, null) || 1;\r\n\r\n    this.initialize_svg(this.container);\r\n    this.links = this.phylotree.nodes.links();\r\n    this.initializeEdgeLabels();\r\n    this.update();\r\n    events.d3PhylotreeAddEventListener();\r\n  }\r\n\r\n  pad_height() {\r\n    if (this.draw_scale_bar) {\r\n      return this.scale_bar_font_size + 25;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  pad_width() {\r\n    // reset label_width\r\n    this.label_width = this._label_width(this.shown_font_size);\r\n\r\n    const _label_width = this.options[\"show-labels\"] ? this.label_width : 0;\r\n    return this.offsets[1] + this.options[\"left-offset\"] + _label_width;\r\n  }\r\n\r\n  /**\r\n   * Collapses a given node.\r\n   *\r\n   * @param {Node} node A node to be collapsed.\r\n   */\r\n  collapse_node(n) {\r\n    if (!render_nodes.isNodeCollapsed(n)) {\r\n      n.collapsed = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get or set the size of tree in pixels.\r\n   *\r\n   * @param {Array} attr (optional) An array of the form ``[height, width]``.\r\n   * @returns {Phylotree} The current ``size`` array if getting, or the current ``phylotree``\r\n   * if setting.\r\n   */\r\n  set_size(attr) {\r\n    if (!arguments.length) {\r\n      return this.size;\r\n    }\r\n\r\n    let phylo_attr = attr;\r\n\r\n    if (this.options[\"top-bottom-spacing\"] != \"fixed-step\") {\r\n      this.size[0] = phylo_attr[0];\r\n    }\r\n    if (this.options[\"left-right-spacing\"] != \"fixed-step\") {\r\n      this.size[1] = phylo_attr[1];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Getter/setter for the SVG element for the Phylotree to be rendered in.\r\n   *\r\n   * @param {d3-selection} svg_element (Optional) SVG element to render within, selected by D3.\r\n   * @returns The selected SVG element if getting, or the current ``phylotree`` if setting.`\r\n   */\r\n  initialize_svg(svg_element) {\r\n    //if (!arguments.length) return this.svg;\r\n\r\n    if (this.svg !== svg_element) {\r\n      d3.select(svg_element)\r\n        .select(\"svg\")\r\n        .remove();\r\n\r\n      this.svg = d3\r\n        .create(\"svg\")\r\n        .attr(\"width\", this.width)\r\n        .attr(\"height\", this.height);\r\n\r\n      this.set_size([this.height, this.width]);\r\n\r\n      if (this.css_classes[\"tree-container\"] == \"phylotree-container\") {\r\n        this.svg.selectAll(\"*\").remove();\r\n        this.svg.append(\"defs\");\r\n      }\r\n\r\n      d3.select(this.container).on(\r\n        \"click\",\r\n        d => {\r\n          this.handle_node_click(null);\r\n        },\r\n        true\r\n      );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  update_layout(new_json, do_hierarchy) {\r\n    if (do_hierarchy) {\r\n      this.nodes = d3.hierarchy(new_json);\r\n      this.nodes.each(function(d) {\r\n        d.id = null;\r\n      });\r\n    }\r\n\r\n    this.update();\r\n    this.syncEdgeLabels();\r\n  }\r\n\r\n  /**\r\n   * Update the current phylotree, i.e., alter the svg\r\n   * elements.\r\n   *\r\n   * @param {Boolean} transitions (Optional) Toggle whether transitions should be shown.\r\n   * @returns The current ``phylotree``.\r\n   */\r\n  update(transitions) {\r\n\r\n    var self = this;\r\n\r\n    //if (!this.svg) return this;\r\n\r\n    this.placenodes();\r\n\r\n    transitions = this.transitions(transitions);\r\n\r\n    let node_id = 0;\r\n\r\n    let enclosure = this.svg\r\n      .selectAll(\".\" + css_classes[\"tree-container\"])\r\n      .data([0]);\r\n\r\n    enclosure = enclosure\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", css_classes[\"tree-container\"])\r\n      .merge(enclosure)\r\n      .attr(\"transform\", d => {\r\n        return this.d3PhylotreeSvgTranslate([\r\n          this.offsets[1] + this.options[\"left-offset\"],\r\n          this.pad_height()\r\n        ]);\r\n      });\r\n\r\n    if (this.draw_scale_bar) {\r\n      let scale_bar = this.svg\r\n        .selectAll(\".\" + css_classes[\"tree-scale-bar\"])\r\n        .data([0]);\r\n\r\n      scale_bar\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", css_classes[\"tree-scale-bar\"])\r\n        .style(\"font-size\", this.ensure_size_is_in_px(this.scale_bar_font_size))\r\n        .merge(scale_bar)\r\n        .attr(\"transform\", d => {\r\n          return this.d3PhylotreeSvgTranslate([\r\n            this.offsets[1] + this.options[\"left-offset\"],\r\n            this.pad_height() - 10\r\n          ]);\r\n        })\r\n        .call(this.draw_scale_bar);\r\n\r\n      scale_bar.selectAll(\"text\").style(\"text-anchor\", \"end\");\r\n    } else {\r\n      this.svg.selectAll(\".\" + css_classes[\"tree-scale-bar\"]).remove();\r\n    }\r\n\r\n    enclosure = this.svg\r\n      .selectAll(\".\" + css_classes[\"tree-container\"])\r\n      .data([0]);\r\n\r\n    this.updateCollapsedClades(transitions);\r\n\r\n    let drawn_links = enclosure\r\n      .selectAll(render_edges.edgeCssSelectors(css_classes))\r\n      .data(this.links.filter(render_edges.edgeVisible), d => {\r\n        return d.target.id || (d.target.id = ++node_id);\r\n      });\r\n\r\n    if (transitions) {\r\n      drawn_links.exit().remove();\r\n    } else {\r\n      drawn_links.exit().remove();\r\n    }\r\n\r\n    drawn_links = drawn_links\r\n      .enter()\r\n      .insert(\"path\", \":first-child\")\r\n      .merge(drawn_links)\r\n      .each(function(d) {\r\n        self.drawEdge(this, d, transitions);\r\n      });\r\n\r\n    let drawn_nodes = enclosure\r\n      .selectAll(render_nodes.nodeCssSelectors(css_classes))\r\n      .data(\r\n        this.phylotree.nodes.descendants().filter(render_nodes.nodeVisible),\r\n        d => {\r\n          return d.id || (d.id = ++node_id);\r\n        }\r\n      );\r\n\r\n    drawn_nodes.exit().remove();\r\n\r\n    drawn_nodes = drawn_nodes\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", this.reclassNode)\r\n      .merge(drawn_nodes)\r\n      .attr(\"transform\", d => {\r\n        const should_shift =\r\n          this.options[\"layout\"] == \"right-to-left\" && isLeafNode(d);\r\n\r\n        d.screen_x = xCoord(d);\r\n        d.screen_y = yCoord(d);\r\n\r\n        return this.d3PhylotreeSvgTranslate([\r\n          should_shift ? 0 : d.screen_x,\r\n          d.screen_y\r\n        ]);\r\n      })\r\n      .each(function(d) {\r\n        self.drawNode(this, d, transitions);\r\n      })\r\n      .attr(\"transform\", d => {\r\n        if (!_.isUndefined(d.screen_x) && !_.isUndefined(d.screen_y)) {\r\n          return \"translate(\" + d.screen_x + \",\" + d.screen_y + \")\";\r\n        }\r\n      });\r\n\r\n    if (this.options[\"label-nodes-with-name\"]) {\r\n      drawn_nodes = drawn_nodes.attr(\"id\", d => {\r\n        return \"node-\" + d.name;\r\n      });\r\n    }\r\n\r\n    this.resizeSvg(this.phylotree, this.svg, transitions);\r\n\r\n    if (this.options[\"brush\"]) {\r\n      var brush = enclosure\r\n        .selectAll(\".\" + css_classes[\"tree-selection-brush\"])\r\n        .data([0])\r\n        .enter()\r\n        .insert(\"g\", \":first-child\")\r\n        .attr(\"class\", css_classes[\"tree-selection-brush\"]);\r\n\r\n      var brush_object = d3\r\n        .brush()\r\n        .on(\"brush\", (event, d) => {\r\n          var extent = event.selection,\r\n            shown_links = this.links.filter(render_edges.edgeVisible);\r\n          var selected_links = shown_links\r\n              .filter((d, i) => {\r\n                return (\r\n                  d.source.screen_x >= extent[0][0] &&\r\n                  d.source.screen_x <= extent[1][0] &&\r\n                  d.source.screen_y >= extent[0][1] &&\r\n                  d.source.screen_y <= extent[1][1] &&\r\n                  d.target.screen_x >= extent[0][0] &&\r\n                  d.target.screen_x <= extent[1][0] &&\r\n                  d.target.screen_y >= extent[0][1] &&\r\n                  d.target.screen_y <= extent[1][1]\r\n                );\r\n              })\r\n              .map(d => {\r\n                return d.target;\r\n              });\r\n\r\n          this.modifySelection(\r\n\r\n            this.phylotree.links.map(d => {\r\n              return d.target;\r\n            }),\r\n            \"tag\",\r\n            false,\r\n            selected_links.length > 0,\r\n            \"false\"\r\n          );\r\n\r\n          this.modifySelection(selected_links, \"tag\", false, false, \"true\");\r\n\r\n        })\r\n        .on(\"end\", () => {\r\n          //brush.call(d3.event.target.clear());\r\n        });\r\n\r\n      brush.call(brush_object);\r\n    }\r\n\r\n    this.syncEdgeLabels();\r\n\r\n    if (this.options[\"zoom\"]) {\r\n      let zoom = d3\r\n        .zoom()\r\n        .scaleExtent([0.1, 10])\r\n        .on(\"zoom\", (event) => {\r\n\r\n          d3.select(\".\" + css_classes[\"tree-container\"]).attr(\"transform\", d => {\r\n            let toTransform = event.transform;\r\n            return toTransform;\r\n          });\r\n\r\n          // Give some extra room\r\n          d3.select(\".\" + css_classes[\"tree-scale-bar\"]).attr(\"transform\", d => {\r\n            let toTransform = event.transform;\r\n            toTransform.y -= 10; \r\n            return toTransform;\r\n          });\r\n          \r\n        });\r\n\r\n      this.svg.call(zoom);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  _handle_single_node_layout(\r\n    a_node\r\n  ) {\r\n    let _nodeSpan = this.nodeSpan(a_node) / this.rescale_nodeSpan;\r\n    // compute the relative size of nodes (0,1)\r\n    // sum over all nodes is 1\r\n    this.x = a_node.x =\r\n      this.x +\r\n      this.separation(this.last_node, a_node) +\r\n      (this.last_span + _nodeSpan) * 0.5;\r\n      \r\n \r\n    // separation is a user-settable callback to add additional spacing on nodes\r\n    this._extents[1][1] = Math.max(this._extents[1][1], a_node.y);\r\n    this._extents[1][0] = Math.min(\r\n      this._extents[1][0],\r\n      a_node.y - _nodeSpan * 0.5\r\n    );\r\n    \r\n\r\n    if (this.is_under_collapsed_parent) {\r\n       this._extents[0][1] = Math.max(\r\n        this._extents[0][1],\r\n        this.save_x +\r\n          (a_node.x - this.save_x) * this.options[\"compression\"] +\r\n          this.save_span +\r\n          (_nodeSpan * 0.5 + this.separation(this.last_node, a_node)) *\r\n            this.options[\"compression\"]\r\n      );      \r\n    } else {\r\n      this._extents[0][1] = Math.max(\r\n        this._extents[0][1],\r\n        this.x + _nodeSpan * 0.5 + this.separation(this.last_node, a_node)\r\n      );\r\n    }\r\n\r\n\r\n    this.last_node = a_node;\r\n    this.last_span = _nodeSpan;\r\n    \r\n  }\r\n\r\n  tree_layout(a_node) {\r\n    /**\r\n            for each node: \r\n                y: the y coordinate is root to tip\r\n                    (left to right in cladogram layout, radius is radial layout\r\n                x : the x coordinate is top-most to bottom-most \r\n                    (top to bottom in cladogram layout, angle in radial layout)\r\n                \r\n                \r\n         @return the x-coordinate of a_node or undefined in the node is not displayed\r\n                 (hidden or under a collapsed node)\r\n        */\r\n\r\n\r\n    // do not layout hidden nodes\r\n    if (render_nodes.nodeNotshown(a_node)) {\r\n      return undefined;\r\n    }\r\n\r\n    let is_leaf = isLeafNode(a_node);\r\n\r\n    // the next four members are radial layout options\r\n    a_node.text_angle = null; // the angle at which text is being laid out\r\n    a_node.text_align = null; // css alignment option for node labels\r\n    a_node.radius = null; // radial layout radius\r\n    a_node.angle = null; // radial layout angle (in radians)\r\n\r\n    /** determine the root-to-tip location of this node;\r\n            \r\n      the root node receives the co-ordinate of 0\r\n      \r\n      if the tree has branch lengths, then the placement of each node is simply the \r\n      total branch length to the root\r\n      \r\n      if the tree has no branch lengths, all leaves get the same depth (\"number of internal nodes on the deepest path\")\r\n      and all internal nodes get the depth in integer units of the # of internal nodes on the path to the root + 1\r\n        \r\n    */\r\n\r\n    let undef_BL = false;\r\n\r\n    /** _extents computes a bounding box for the tree (initially NOT in screen \r\n            coordinates)\r\n\r\n        all account for node sizes\r\n\r\n        _extents [1][0] -- the minimum x coordinate (breadth)\r\n        _extents [1][1] -- the maximum y coordinate (breadth)\r\n        _extents [1][0] -- the minimum y coordinate (root-to-tip, or depthwise)\r\n        _extents [1][1] -- the maximum y coordinate (root-to-tip, or depthwise)\r\n\r\n    */\r\n\r\n\r\n    // last node laid out in the top bottom hierarchy\r\n\r\n    if (a_node[\"parent\"]) {\r\n      if (this.do_scaling) {\r\n        if (undef_BL) {\r\n          return 0;\r\n        }\r\n\r\n        a_node.y = this.phylotree.branch_length_accessor(a_node);\r\n\r\n        if (typeof a_node.y === \"undefined\") {\r\n          undef_BL = true;\r\n          return 0;\r\n        }\r\n        a_node.y += a_node.parent.y;\r\n      } else {\r\n        a_node.y = is_leaf ? this.max_depth : a_node.depth;\r\n      }\r\n    } else {\r\n      this.x = 0.0;\r\n      // the span of the last node laid out in the top to bottom hierarchy\r\n      a_node.y = 0.0;\r\n      this.last_node = null;\r\n      this.last_span = 0.0;\r\n      this._extents = [[0, 0], [0, 0]];\r\n    }\r\n\r\n    /** the next block has to do with top-to-bottom spacing of nodes **/\r\n\r\n    if (is_leaf) {\r\n      // displayed internal nodes are handled in `process_internal_node`\r\n      this._handle_single_node_layout(\r\n        a_node\r\n      );\r\n    }\r\n\r\n    if (!is_leaf) {\r\n      // for internal nodes\r\n      if (\r\n        render_nodes.isNodeCollapsed(a_node) &&\r\n        !this.is_under_collapsed_parent\r\n      ) {\r\n        // collapsed node\r\n        this.save_x = this.x;\r\n        this.save_span = this.last_span * 0.5;\r\n        this.is_under_collapsed_parent = true;\r\n        this.process_internal_node(a_node);\r\n        this.is_under_collapsed_parent = false;\r\n \r\n        if (typeof a_node.x === \"number\") {\r\n          a_node.x =\r\n            this.save_x +\r\n            (a_node.x -this.save_x) * this.options[\"compression\"] +\r\n            this.save_span;\r\n\r\n          a_node.collapsed = [[a_node.x, a_node.y]];\r\n\r\n          var map_me = n => {\r\n            n.hidden = true;\r\n\r\n            if (isLeafNode(n)) {            \r\n              this.x = n.x =\r\n                this.save_x +\r\n                (n.x - this.save_x) * this.options[\"compression\"] +\r\n                this.save_span;\r\n\r\n              a_node.collapsed.push([n.x, n.y]);             \r\n            } else {\r\n              n.children.map(map_me);\r\n            }\r\n          };\r\n\r\n          this.x = this.save_x;\r\n          map_me(a_node);\r\n         \r\n\r\n          a_node.collapsed.splice(1, 0, [this.save_x, a_node.y]);\r\n          a_node.collapsed.push([this.x, a_node.y]);\r\n          a_node.collapsed.push([a_node.x, a_node.y]);\r\n          a_node.hidden = false;\r\n        }\r\n      } else {\r\n        // normal node, or under a collapsed parent\r\n        this.process_internal_node(a_node);\r\n      }\r\n    }\r\n\r\n    return a_node.x;\r\n  }\r\n\r\n  process_internal_node(a_node) {\r\n    /** \r\n            decide if the node will be shown, and compute its top-to-bottom (breadthwise)\r\n            placement \r\n        */\r\n\r\n    let count_undefined = 0;\r\n\r\n    if (this.showInternalName(a_node)) {\r\n      // do in-order traversal to allow for proper internal node spacing\r\n      // (x/2) >> 0 is integer division\r\n      let half_way = (a_node.children.length / 2) >> 0;\r\n      let displayed_children = 0;\r\n      let managed_to_display = false;\r\n\r\n      for (let child_id = 0; child_id < a_node.children.length; child_id++) {\r\n        let child_x = this.tree_layout(a_node.children[child_id]);//.bind(this);\r\n\r\n        if (typeof child_x == \"number\") {\r\n          displayed_children++;\r\n        }\r\n\r\n        if (displayed_children >= half_way && !managed_to_display) {\r\n          this._handle_single_node_layout(a_node);\r\n          managed_to_display = true;\r\n        }\r\n      }\r\n\r\n      if (displayed_children == 0) {\r\n        a_node.notshown = true;\r\n        a_node.x = undefined;\r\n      } else {\r\n        if (!managed_to_display) {\r\n          this._handle_single_node_layout(a_node);\r\n        }\r\n      }\r\n    } else {\r\n      // postorder layout\r\n      a_node.x = a_node.children\r\n        .map(this.tree_layout.bind(this))\r\n        .reduce((a, b) => {\r\n          if (typeof b == \"number\") return a + b;\r\n          count_undefined += 1;\r\n          return a;\r\n        }, 0.0);\r\n\r\n      if (count_undefined == a_node.children.length) {\r\n        a_node.notshown = true;\r\n        a_node.x = undefined;\r\n      } else {\r\n        a_node.x /= a_node.children.length - count_undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  do_lr(at_least_one_dimension_fixed) {\r\n    if (this.radial() && at_least_one_dimension_fixed) {\r\n      this.offsets[1] = 0;\r\n    }\r\n\r\n    if (this.options[\"left-right-spacing\"] == \"fixed-step\") {\r\n      this.size[1] = this.max_depth * this.fixed_width[1];\r\n\r\n      this.scales[1] = \r\n        (this.size[1] - this.offsets[1] - this.options[\"left-offset\"]) /\r\n        this._extents[1][1];\r\n\r\n      this.label_width = this._label_width(this.shown_font_size);\r\n\r\n      if (this.radial()) {\r\n        this.label_width *= 2;\r\n      }\r\n    } else {\r\n      this.label_width = this._label_width(this.shown_font_size);\r\n\r\n      at_least_one_dimension_fixed = true;\r\n\r\n      let available_width =\r\n        this.size[1] - this.offsets[1] - this.options[\"left-offset\"];\r\n\r\n      if (available_width * 0.5 < this.label_width) {\r\n        this.shown_font_size *= (available_width * 0.5) / this.label_width;\r\n        this.label_width = available_width * 0.5;\r\n      }\r\n\r\n      this.scales[1] =\r\n        (this.size[1] -\r\n          this.offsets[1] -\r\n          this.options[\"left-offset\"] -\r\n          this.label_width) /\r\n        this._extents[1][1];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Place the current nodes, i.e., determine their coordinates based\r\n   * on current settings.\r\n   *\r\n   * @returns The current ``phylotree``.\r\n   */\r\n  placenodes() {\r\n    this._extents = [\r\n      [0, 0],\r\n      [0, 0]\r\n    ];\r\n\r\n    this.x = 0.0;\r\n    this.last_span = 0.0;\r\n    //let x = 0.0,\r\n    //  last_span = 0;\r\n    \r\n    this.last_node = null;\r\n    this.last_span = 0.0;\r\n\r\n    (this.save_x = this.x), (this.save_span = this.last_span * 0.5);\r\n\r\n    this.do_scaling = this.options[\"scaling\"];\r\n    let undef_BL = false;\r\n\r\n    this.is_under_collapsed_parent = false;\r\n    this.max_depth = 1;\r\n    \r\n    // Set initial x\r\n    this.phylotree.nodes.x = this.tree_layout(\r\n      this.phylotree.nodes,\r\n      this.do_scaling\r\n    );\r\n\r\n    this.max_depth = d3.max(this.phylotree.nodes.descendants(), n => {\r\n      return n.depth;\r\n    });\r\n\r\n    if (this.do_scaling && undef_BL) {\r\n      // requested scaling, but some branches had no branch lengths\r\n      // redo layout without branch lengths\r\n      this.do_scaling = false;\r\n      this.phylotree.nodes.x = this.tree_layout(this.phylotree.nodes);\r\n    }\r\n\r\n    let at_least_one_dimension_fixed = false;\r\n\r\n    this.draw_scale_bar = this.options[\"show-scale\"] && this.do_scaling;\r\n\r\n    // this is a hack so that phylotree.pad_height would return ruler spacing\r\n    this.offsets[1] = Math.max(\r\n      this.font_size,\r\n      -this._extents[1][0] * this.fixed_width[0]\r\n    );\r\n\r\n    if (this.options[\"top-bottom-spacing\"] == \"fixed-step\") {\r\n      this.size[0] = this._extents[0][1] * this.fixed_width[0];\r\n      this.scales[0] = this.fixed_width[0];\r\n    } else {\r\n      this.scales[0] = (this.size[0] - this.pad_height()) / this._extents[0][1];\r\n      at_least_one_dimension_fixed = true;\r\n    }\r\n\r\n    this.shown_font_size = Math.min(this.font_size, this.scales[0]);\r\n\r\n    if (this.radial()) {\r\n      // map the nodes to polar coordinates\r\n      this.draw_branch = _.partial(drawArc, this.radial_center);\r\n      this.edge_placer = arcSegmentPlacer;\r\n\r\n      let last_child_angle = null,\r\n        last_circ_position = null,\r\n        last_child_radius = null,\r\n        min_radius = 0,\r\n        effective_span = this._extents[0][1] * this.scales[0];\r\n\r\n      let compute_distance = function(r1, r2, a1, a2, annular_shift) {\r\n        annular_shift = annular_shift || 0;\r\n        return Math.sqrt(\r\n          (r2 - r1) * (r2 - r1) +\r\n            2 *\r\n              (r1 + annular_shift) *\r\n              (r2 + annular_shift) *\r\n              (1 - Math.cos(a1 - a2))\r\n        );\r\n      };\r\n\r\n      let max_r = 0;\r\n\r\n      this.phylotree.nodes.each(d => {\r\n        let my_circ_position = d.x * this.scales[0];\r\n        d.angle = (2 * Math.PI * my_circ_position) / effective_span;\r\n        d.text_angle = d.angle - Math.PI / 2;\r\n        d.text_angle = d.text_angle > 0 && d.text_angle < Math.PI;\r\n        d.text_align = d.text_angle ? \"end\" : \"start\";\r\n        d.text_angle = (d.text_angle ? 180 : 0) + (d.angle * 180) / Math.PI;\r\n      });\r\n\r\n      this.do_lr(at_least_one_dimension_fixed);\r\n\r\n      this.phylotree.nodes.each(d => {\r\n        d.radius = (d.y * this.scales[1]) / this.size[1];\r\n        max_r = Math.max(d.radius, max_r);\r\n      });\r\n\r\n      let annular_shift = 0;\r\n\r\n      this.phylotree.nodes.each(d => {\r\n        if (!d.children) {\r\n          let my_circ_position = d.x * this.scales[0];\r\n          if (last_child_angle !== null) {\r\n            let required_spacing = my_circ_position - last_circ_position,\r\n              radial_dist = compute_distance(\r\n                d.radius,\r\n                last_child_radius,\r\n                d.angle,\r\n                last_child_angle,\r\n                annular_shift\r\n              );\r\n\r\n            let local_mr =\r\n              radial_dist > 0\r\n                ? required_spacing / radial_dist\r\n                : 10 * this.options[\"max-radius\"];\r\n\r\n            if (local_mr > this.options[\"max-radius\"]) {\r\n              // adjust the annular shift\r\n              let dd = required_spacing / this.options[\"max-radius\"],\r\n                b = d.radius + last_child_radius,\r\n                c =\r\n                  d.radius * last_child_radius -\r\n                  (dd * dd -\r\n                    (last_child_radius - d.radius) *\r\n                      (last_child_radius - d.radius)) /\r\n                    2 /\r\n                    (1 - Math.cos(last_child_angle - d.angle)),\r\n                st = Math.sqrt(b * b - 4 * c);\r\n\r\n              annular_shift = Math.min(\r\n                this.options[\"annular-limit\"] * max_r,\r\n                (-b + st) / 2\r\n              );\r\n              min_radius = this.options[\"max-radius\"];\r\n            } else {\r\n              min_radius = Math.max(min_radius, local_mr);\r\n            }\r\n          }\r\n\r\n          last_child_angle = d.angle;\r\n          last_circ_position = my_circ_position;\r\n          last_child_radius = d.radius;\r\n        }\r\n      });\r\n\r\n      this.radius = Math.min(\r\n        this.options[\"max-radius\"],\r\n        Math.max(effective_span / 2 / Math.PI, min_radius)\r\n      );\r\n\r\n      if (at_least_one_dimension_fixed) {\r\n        this.radius = Math.min(\r\n          this.radius,\r\n          (Math.min(effective_span, this._extents[1][1] * this.scales[1]) -\r\n            this.label_width) *\r\n            0.5 -\r\n            this.radius * annular_shift\r\n        );\r\n      }\r\n\r\n      this.radial_center = this.radius_pad_for_bubbles = this.radius;\r\n      this.draw_branch = _.partial(drawArc, this.radial_center);\r\n\r\n      let scaler = 1;\r\n\r\n      if (annular_shift) {\r\n        scaler = max_r / (max_r + annular_shift);\r\n        this.radius *= scaler;\r\n      }\r\n\r\n      this.phylotree.nodes.each(d => {\r\n        cartesianToPolar(\r\n          d,\r\n          this.radius,\r\n          annular_shift,\r\n          this.radial_center,\r\n          this.scales,\r\n          this.size\r\n        );\r\n\r\n        max_r = Math.max(max_r, d.radius);\r\n\r\n        if (this.options[\"draw-size-bubbles\"]) {\r\n          this.radius_pad_for_bubbles = Math.max(\r\n            this.radius_pad_for_bubbles,\r\n            d.radius + this.nodeBubbleSize(d)\r\n          );\r\n        } else {\r\n          this.radius_pad_for_bubbles = Math.max(\r\n            this.radius_pad_for_bubbles,\r\n            d.radius\r\n          );\r\n        }\r\n\r\n        if (d.collapsed) {\r\n          d.collapsed = d.collapsed.map(p => {\r\n            let z = {};\r\n            z.x = p[0];\r\n            z.y = p[1];\r\n            z = cartesianToPolar(\r\n              z,\r\n              this.radius,\r\n              annular_shift,\r\n              this.radial_center,\r\n              this.scales,\r\n              this.size\r\n            );\r\n            return [z.x, z.y];\r\n          });\r\n\r\n          let last_point = d.collapsed[1];\r\n\r\n          d.collapsed = d.collapsed.filter(function(p, i) {\r\n            if (i < 3 || i > d.collapsed.length - 4) return true;\r\n            if (\r\n              Math.sqrt(\r\n                Math.pow(p[0] - last_point[0], 2) +\r\n                  Math.pow(p[1] - last_point[1], 2)\r\n              ) > 3\r\n            ) {\r\n              last_point = p;\r\n              return true;\r\n            }\r\n            return false;\r\n          });\r\n        }\r\n      });\r\n\r\n      this.size[0] = this.radial_center + this.radius / scaler;\r\n      this.size[1] = this.radial_center + this.radius / scaler;\r\n    } else {\r\nthis.do_lr();\r\n\r\n      this.draw_branch = draw_line;\r\n      this.edge_placer = lineSegmentPlacer;\r\n      this.right_most_leaf = 0;\r\n\r\n      this.phylotree.nodes.each(d => {\r\n\r\n        d.x *= this.scales[0];\r\n        d.y *= this.scales[1]*.8;\r\n\r\n        if (this.options[\"layout\"] == \"right-to-left\") {   \r\n          d.y = this._extents[1][1] * this.scales[1] - d.y;\r\n        }\r\n\r\n\r\n        if (isLeafNode(d)) {\r\n          this.right_most_leaf = Math.max(\r\n            this.right_most_leaf,\r\n            d.y + this.nodeBubbleSize(d)\r\n          );\r\n        }\r\n\r\n        if (d.collapsed) {\r\n          d.collapsed.forEach(p => {\r\n            p[0] *= this.scales[0];\r\n            p[1] *= this.scales[1]*.8;\r\n          });\r\n\r\n          let last_x = d.collapsed[1][0];\r\n\r\n          d.collapsed = d.collapsed.filter(function(p, i) {\r\n            if (i < 3 || i > d.collapsed.length - 4) return true;\r\n            if (p[0] - last_x > 3) {\r\n              last_x = p[0];\r\n              return true;\r\n            }\r\n            return false;\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.draw_scale_bar) {\r\n      let domain_limit, range_limit;\r\n\r\n      if (this.radial()) {\r\n        range_limit = Math.min(this.radius / 5, 50);\r\n        domain_limit = Math.pow(\r\n          10,\r\n          Math.ceil(\r\n            Math.log((this._extents[1][1] * range_limit) / this.radius) /\r\n              Math.log(10)\r\n          )\r\n        );\r\n        \r\n\r\n        range_limit = domain_limit * (this.radius / this._extents[1][1]);\r\n\r\n        if (range_limit < 30) {\r\n          let stretch = Math.ceil(30 / range_limit);\r\n          range_limit *= stretch;\r\n          domain_limit *= stretch;\r\n        }\r\n      } else {\r\n        domain_limit = this._extents[1][1];\r\n\r\n        range_limit =\r\n          this.size[1] - this.offsets[1] - this.options[\"left-offset\"] - this.shown_font_size;\r\n     }\r\n\r\n      let scale = d3\r\n          .scaleLinear()\r\n          .domain([0, domain_limit])\r\n          .range([0, range_limit]),\r\n         \r\n          scaleTickFormatter = d3.format(\".2f\");\r\n\r\n      this.draw_scale_bar = d3\r\n        .axisTop()\r\n        .scale(scale)\r\n        .tickFormat(function(d) {\r\n          if (d === 0) {\r\n            return \"\";\r\n          }\r\n          return scaleTickFormatter(d);\r\n        });\r\n\r\n      if (this.radial()) {\r\n        this.draw_scale_bar.tickValues([domain_limit]);\r\n      } else {\r\n        let round = function(x, n) {\r\n          return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\r\n        };\r\n\r\n        let my_ticks = scale.ticks();\r\n        my_ticks = my_ticks.length > 1 ? my_ticks[1] : my_ticks[0];\r\n\r\n        this.draw_scale_bar.ticks(\r\n          Math.min(\r\n            10,\r\n            round(\r\n              range_limit /\r\n                (this.shown_font_size *\r\n                  scaleTickFormatter(my_ticks).length *\r\n                  2),\r\n              0\r\n            )\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      this.draw_scale_bar = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get or set spacing in the x-direction.\r\n   *\r\n   * @param {Number} attr (Optional), the new spacing value if setting.\r\n   * @param {Boolean} skip_render (Optional), whether or not a refresh should be performed.\r\n   * @returns The current ``spacing_x`` value if getting, or the current ``phylotree`` if setting.\r\n   */\r\n  spacing_x(attr, skip_render) {\r\n    if (!arguments.length) return this.fixed_width[0];\r\n\r\n    if (\r\n      this.fixed_width[0] != attr &&\r\n      attr >= this.options[\"minimum-per-node-spacing\"] &&\r\n      attr <= this.options[\"maximum-per-node-spacing\"]\r\n    ) {\r\n      this.fixed_width[0] = attr;\r\n      if (!skip_render) {\r\n        this.placenodes();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get or set spacing in the y-direction.\r\n   *\r\n   * @param {Number} attr (Optional), the new spacing value if setting.\r\n   * @param {Boolean} skip_render (Optional), whether or not a refresh should be performed.\r\n   * @returns The current ``spacing_y`` value if getting, or the current ``phylotree`` if setting.\r\n   */\r\n  spacing_y(attr, skip_render) {\r\n    if (!arguments.length) return this.fixed_width[1];\r\n\r\n    if (\r\n      this.fixed_width[1] != attr &&\r\n      attr >= this.options[\"minimum-per-level-spacing\"] &&\r\n      attr <= this.options[\"maximum-per-level-spacing\"]\r\n    ) {\r\n      this.fixed_width[1] = attr;\r\n      if (!skip_render) {\r\n        this.placenodes();\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  _label_width(_font_size) {\r\n    _font_size = _font_size || this.shown_font_size;\r\n    let width = 0;\r\n\r\n    this.phylotree.nodes\r\n      .descendants()\r\n      .filter(render_nodes.nodeVisible)\r\n      .forEach(node => {\r\n        let node_width = 12 + this._nodeLabel(node).length * _font_size * 0.8;\r\n\r\n        if (node.angle !== null) {\r\n          node_width *= Math.max(\r\n            Math.abs(Math.cos(node.angle)),\r\n            Math.abs(Math.sin(node.angle))\r\n          );\r\n        }\r\n        width = Math.max(node_width, width);\r\n      });\r\n\r\n    return width;\r\n  }\r\n\r\n  /**\r\n   * Get or set font size.\r\n   *\r\n   * @param {Function} attr Empty if getting, or new font size if setting.\r\n   * @returns The current ``font_size`` accessor if getting, or the current ``phylotree`` if setting.\r\n   */\r\n  font_size(attr) {\r\n    if (!arguments.length) return this.font_size;\r\n    this.font_size = attr === undefined ? 12 : attr;\r\n    return this;\r\n  }\r\n\r\n  scale_bar_font_size(attr) {\r\n    if (!arguments.length) return this.scale_bar_font_size;\r\n    this.scale_bar_font_size = attr === undefined ? 12 : attr;\r\n    return this;\r\n  }\r\n\r\n  node_circle_size(attr, attr2) {\r\n    if (!arguments.length) return this.options[\"node_circle_size\"];\r\n    this.options[\"node_circle_size\"] = constant(attr === undefined ? 3 : attr);\r\n    return this;\r\n  }\r\n\r\n  css(opt) {\r\n    if (arguments.length === 0) return this.css_classes;\r\n\r\n    if (arguments.length > 2) {\r\n      var arg = {};\r\n      arg[opt[0]] = opt[1];\r\n      return this.css(arg);\r\n    }\r\n\r\n    for (var key in css_classes) {\r\n      if (key in opt && opt[key] != css_classes[key]) {\r\n        css_classes[key] = opt[key];\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  transitions(arg) {\r\n    if (arg !== undefined) {\r\n      return arg;\r\n    }\r\n\r\n    if (this.options[\"transitions\"] !== null) {\r\n      return this.options[\"transitions\"];\r\n    }\r\n\r\n    return this.phylotree.nodes.descendants().length <= 300;\r\n  }\r\n\r\n  /**\r\n   * Get or set CSS classes.\r\n   *\r\n   * @param {Object} opt Keys are the CSS class to toggle and values are\r\n   * the parameters for that CSS class.\r\n   * @param {Boolean} run_update (optional) Whether or not the tree should update.\r\n   * @returns The current ``phylotree``.\r\n   */\r\n  css_classes(opt, run_update) {\r\n    if (!arguments.length) return this.css_classes;\r\n\r\n    let do_update = false;\r\n\r\n    for (var key in css_classes) {\r\n      if (key in opt && opt[key] != this.css_classes[key]) {\r\n        do_update = true;\r\n        this.css_classes[key] = opt[key];\r\n      }\r\n    }\r\n\r\n    if (run_update && do_update) {\r\n      this.layout();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Lay out the tree within the SVG.\r\n   *\r\n   * @param {Boolean} transitions Specify whether or not transitions should occur.\r\n   * @returns The current ``phylotree``.\r\n   */\r\n  layout(transitions) {\r\n    if (this.svg) {\r\n      this.svg.selectAll(\r\n        \".\" +\r\n          this.css_classes[\"tree-container\"] +\r\n          \",.\" +\r\n          this.css_classes[\"tree-scale-bar\"] +\r\n          \",.\" +\r\n          this.css_classes[\"tree-selection-brush\"]\r\n      );\r\n\r\n      //.remove();\r\n      this.d3PhylotreeTriggerLayout(this);\r\n      return this.update();\r\n    }\r\n\r\n    this.d3PhylotreeTriggerLayout(this);\r\n    return this;\r\n  }\r\n\r\n  handle_node_click(node, event) {\r\n    this.nodeDropdownMenu(node, this.container, this, this.options, event);\r\n  }\r\n\r\n  refresh() {\r\n    if (this.svg) {\r\n      // for re-entrancy\r\n      let enclosure = this.svg.selectAll(\r\n        \".\" + this.css_classes[\"tree-container\"]\r\n      );\r\n\r\n      let edges = enclosure\r\n        .selectAll(render_edges.edgeCssSelectors(this.css_classes))\r\n        .attr(\"class\", this.reclassEdge.bind(this));\r\n\r\n      if (this.edge_styler) {\r\n        edges.each(d => {\r\n          this.edge_styler(d3.select(this), d);\r\n        });\r\n      }\r\n\r\n      //let nodes = this.enclosure\r\n      //  .selectAll(inspector.nodeCssSelectors(this.css_classes))\r\n      //  .attr(\"class\", this.phylotree.reclassNode);\r\n\r\n      //if (this.node_styler) {\r\n      //  nodes.each(function(d) {\r\n      //    this.node_styler(d3.select(this), d);\r\n      //  });\r\n      //}\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  countHandler(attr) {\r\n    if (!arguments.length) return this.count_listener_handler;\r\n    this.count_listener_handler = attr;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get or set node styler. If setting, pass a function of two arguments,\r\n   * ``element`` and ``data``. ``data`` exposes the underlying node so that\r\n   * its attributes can be referenced. These can be used to apply styles to\r\n   * ``element``, which will be a D3 selection corresponding to the SVG element\r\n   * that makes up the current node.\r\n   * ``transition`` is the third argument which indicates that there is an ongoing\r\n   * d3 transition in progress\r\n   *\r\n   * @param {Function} attr - Optional; if setting, the node styler function to be set.\r\n   * @returns The ``node_styler`` function if getting, or the current ``phylotree`` if setting.\r\n   */\r\n  style_nodes(attr) {\r\n    if (!arguments.length) return this.node_styler;\r\n    this.node_styler = attr;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get or set edge styler. If setting, pass a function of two arguments,\r\n   * ``element`` and ``data``. ``data`` exposes the underlying edge so that\r\n   * its attributes can be referenced. These can be used to apply styles to\r\n   * ``element``, which will be a D3 selection corresponding to the SVG element\r\n   * that makes up the current edge.\r\n   *\r\n   * Note that, in accordance with the D3 hierarchy layout, edges will have\r\n   * a ``source`` and ``target`` field, corresponding to the nodes that make up\r\n   * up the associated branch.\r\n   *\r\n   * @param {Function} attr - Optional; if setting, the node styler function to be set.\r\n   * @returns The ``edge_styler`` function if getting, or the current ``phylotree`` if setting.\r\n   */\r\n  style_edges(attr) {\r\n    if (!arguments.length) return this.edge_styler;\r\n    this.edge_styler = attr.bind(this);\r\n    return this;\r\n  }\r\n\r\n  itemSelected(item, tag) {\r\n    return item[tag] || false;\r\n  }\r\n\r\n  show() {\r\n    return this.svg.node()\r\n  }\r\n\r\n}\r\n\r\n_.extend(TreeRender.prototype, clades);\r\n_.extend(TreeRender.prototype, render_nodes);\r\n_.extend(TreeRender.prototype, render_edges);\r\n_.extend(TreeRender.prototype, events);\r\n_.extend(TreeRender.prototype, menus);\r\n_.extend(TreeRender.prototype, opt);\r\n\r\nexport default TreeRender;\r\n","import * as d3 from \"d3\";\r\nimport * as _ from \"underscore\";\r\n\r\nimport { default as parser_registry } from \"./formats/registry\";\r\nimport { default as newickParser, getNewick } from \"./formats/newick\";\r\nimport { default as getTipLengths } from \"./export\";\r\nimport * as nexus from \"./formats/nexus\";\r\nimport { default as phyloxml_parser } from \"./formats/phyloxml\";\r\nimport { default as maxParsimony } from \"./max-parsimony\";\r\nimport { leftChildRightSibling, postOrder, preOrder, default as inOrder } from \"./traversal\";\r\n\r\nimport {\r\n  default as hasBranchLengths,\r\n  getBranchLengths,\r\n  defBranchLengthAccessor,\r\n  setBranchLength,\r\n  branchName,\r\n  normalize,\r\n  scale\r\n} from \"./branches\";\r\n\r\nimport * as node_operations from \"./nodes\";\r\nimport * as rooting from \"./rooting\";\r\nimport { default as TreeRender } from \"./render/draw\";\r\n\r\nfunction resortChildren(comparator, start_node, filter) {\r\n  // ascending\r\n  this.nodes\r\n    .sum(function(d) {\r\n      return d.value;\r\n    })\r\n    .sort(comparator);\r\n\r\n  // if a tree is rendered in the DOM\r\n  if (this.display) {\r\n    this.display.update_layout(this.nodes);\r\n    this.display.update();\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * Return most recent common ancestor of a pair of nodes.\r\n * @returns An array of strings, comprising each tag that was read.\r\n */\r\nfunction mrca() {\r\n\r\n  var mrca_nodes, mrca;\r\n\r\n  if (arguments.length == 1) {\r\n    mrca_nodes = arguments[0];\r\n  } else {\r\n    mrca_nodes = Array.from(arguments);\r\n  }\r\n\r\n  mrca_nodes = mrca_nodes.map(function(mrca_node) {\r\n    return typeof mrca_node == \"string\" ? mrca_node : mrca_node.name;\r\n  });\r\n\r\n  this.traverse_and_compute(function(node) {\r\n    if (!node.children) {\r\n      node.mrca = _.intersection([node.name], mrca_nodes);\r\n    } else if (!node.parent) {\r\n      if (!mrca) {\r\n        mrca = node;\r\n      }\r\n    } else {\r\n      node.mrca = _.union(...node.descendants().map(child => child.mrca));\r\n      if (!mrca && node.mrca.length == mrca_nodes.length) {\r\n        mrca = node;\r\n      }\r\n    }\r\n  });\r\n\r\n  return mrca;\r\n\r\n}\r\n\r\n/**\r\n * An instance of a phylotree. Sets event listeners, parses tags, and creates links\r\n * that represent branches.\r\n *\r\n * @param {Object} nwk - A Newick string, PhyloXML string, or hierarchical JSON representation of a phylogenetic tree.\r\n * @param {Object} options\r\n * - boostrap_values\r\n * - type - format type\r\n * @returns {Phylotree} phylotree - itself, following the builder pattern.\r\n */\r\nlet Phylotree = class {\r\n\r\n  constructor(nwk, options = {}) {\r\n\r\n    this.newick_string = \"\";\r\n\r\n    this.nodes = [];\r\n    this.links = [];\r\n    this.parsed_tags = [];\r\n    this.partitions = [];\r\n    this.branch_length_accessor = defBranchLengthAccessor;\r\n    this.branch_length = defBranchLengthAccessor;\r\n    this.logger = options.logger || console;\r\n    this.selection_attribute_name = \"selected\";\r\n\r\n    // initialization\r\n    var type = options.type || undefined,\r\n      _node_data = [],\r\n      self = this;\r\n\r\n    // If the type is a string, check the parser_registry\r\n    if (_.isString(type)) {\r\n      if (type in parser_registry) {\r\n        _node_data = parser_registry[type](nwk, options);\r\n      } else {\r\n        // Hard failure\r\n        self.logger.error(\r\n          \"type \" +\r\n            type +\r\n            \" not in registry! Available types are \" +\r\n            _.keys(parser_registry)\r\n        );\r\n      }\r\n    } else if (_.isFunction(type)) {\r\n      // If the type is a function, try executing the function\r\n      try {\r\n        _node_data = type(nwk, options);\r\n      } catch (e) {\r\n        // Hard failure\r\n        self.logger.error(\"Could not parse custom format!\");\r\n      }\r\n    } else {\r\n      // this builds children and links;\r\n      if (nwk.name == \"root\") {\r\n        // already parsed by phylotree.js\r\n        _node_data = { json: nwk, error: null };\r\n      } else if (typeof nwk != \"string\") {\r\n        // old default\r\n        _node_data = nwk;\r\n      } else if (nwk.contentType == \"application/xml\") {\r\n        // xml\r\n        _node_data = phyloxml_parser(nwk);\r\n      } else {\r\n        // newick string\r\n        this.newick_string = nwk;\r\n        _node_data = newickParser(nwk, options);\r\n      }\r\n\r\n    }\r\n\r\n    if (!_node_data[\"json\"]) {\r\n\r\n      self.nodes = [];\r\n\r\n    } else {\r\n\r\n      self.nodes = d3.hierarchy(_node_data.json);\r\n\r\n      // Parse tags\r\n      let _parsed_tags = {};\r\n\r\n      self.nodes.each(node => {\r\n        if (node.data.annotation) {\r\n          _parsed_tags[node.data.annotation] = true;\r\n        }\r\n      });\r\n\r\n      self.parsed_tags = Object.keys(_parsed_tags);\r\n\r\n    }\r\n\r\n    self.links = self.nodes.links();\r\n\r\n    // If no branch lengths are supplied, set all to 1\r\n    if(!this.hasBranchLengths()) {\r\n      console.warn(\"Phylotree User Warning : NO BRANCH LENGTHS DETECTED, SETTING ALL LENGTHS TO 1\");\r\n      this.setBranchLength(x => 1)\r\n    }\r\n\r\n    return self;\r\n\r\n  }\r\n\r\n  /*\r\n    Export the nodes of the tree with all local keys to JSON\r\n    The return will be an array of nodes in the specified traversal_type\r\n    ('post-order' : default, 'pre-order', or 'in-order')\r\n    with parents and children referring to indices in that array\r\n\r\n  */\r\n  json(traversal_type) {\r\n\r\n    var index = 0;\r\n\r\n    this.traverse_and_compute(function(n) {\r\n      n.json_export_index = index++;\r\n    }, traversal_type);\r\n\r\n    var node_array = new Array(index);\r\n\r\n    index = 0;\r\n\r\n    this.traverse_and_compute(function(n) {\r\n      let node_copy = _.clone(n);\r\n      delete node_copy.json_export_index;\r\n\r\n      if (n.parent) {\r\n        node_copy.parent = n.parent.json_export_index;\r\n      }\r\n\r\n      if (n.children) {\r\n        node_copy.children = _.map(n.children, function(c) {\r\n          return c.json_export_index;\r\n        });\r\n      }\r\n      node_array[index++] = node_copy;\r\n    }, traversal_type);\r\n\r\n    this.traverse_and_compute(function(n) {\r\n      delete n.json_export_index;\r\n    }, traversal_type);\r\n\r\n    return JSON.stringify(node_array);\r\n  }\r\n\r\n  /*\r\n   * Traverse the tree in a prescribed order, and compute a value at each node.\r\n   *\r\n   * @param {Function} callback A function to be called on each node.\r\n   * @param {String} traversal_type Either ``\"pre-order\"`` or ``\"post-order\"`` or ``\"in-order\"``.\r\n   * @param {Node} root_node start traversal here, if provided, otherwise start at root\r\n   * @param {Function} backtrack ; if provided, then at each node n, backtrack (n) will be called,\r\n                                   and if it returns TRUE, traversal will NOT continue past into this\r\n                                   node and its children\r\n   */\r\n  traverse_and_compute(callback, traversal_type, root_node, backtrack) {\r\n    traversal_type = traversal_type || \"post-order\";\r\n\r\n    function post_order(node) {\r\n      if (_.isUndefined(node)) {\r\n        return;\r\n      }\r\n\r\n      postOrder(node, callback, backtrack);\r\n\r\n    }\r\n\r\n    function pre_order(node) {\r\n      preOrder(node, callback, backtrack);\r\n    }\r\n\r\n    function in_order(node) {\r\n      inOrder(node, callback, backtrack);\r\n    }\r\n\r\n    if (traversal_type == \"pre-order\") {\r\n      traversal_type = pre_order;\r\n    } else {\r\n      if (traversal_type == \"in-order\") {\r\n        traversal_type = in_order;\r\n      } else {\r\n        traversal_type = post_order;\r\n      }\r\n    }\r\n\r\n    traversal_type(root_node ? root_node : this.nodes);\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  get_parsed_tags() {\r\n    return this.parsed_tags;\r\n  }\r\n\r\n  update(json) {\r\n    // update with new hiearchy layout\r\n    this.nodes = json;\r\n  }\r\n\r\n  // Warning : Requires DOM!\r\n  render(options) {\r\n    this.display = new TreeRender(this, options);\r\n    return this.display;\r\n  }\r\n\r\n};\r\n\r\nPhylotree.prototype.isLeafNode = node_operations.isLeafNode;\r\nPhylotree.prototype.mrca = mrca;\r\nPhylotree.prototype.hasBranchLengths = hasBranchLengths;\r\nPhylotree.prototype.getBranchLengths = getBranchLengths;\r\nPhylotree.prototype.branchName = branchName;\r\nPhylotree.prototype.normalizeBranchLengths = normalize;\r\nPhylotree.prototype.scaleBranchLengths = scale;\r\nPhylotree.prototype.getNewick = getNewick;\r\nPhylotree.prototype.resortChildren = resortChildren;\r\nPhylotree.prototype.setBranchLength = setBranchLength;\r\nPhylotree.prototype.maxParsimony = maxParsimony;\r\n\r\nPhylotree.prototype.getTipLengths = getTipLengths;\r\nPhylotree.prototype.leftChildRightSibling = leftChildRightSibling;\r\n\r\n_.extend(Phylotree.prototype, node_operations);\r\n_.extend(Phylotree.prototype, rooting);\r\n_.extend(Phylotree.prototype, nexus);\r\n\r\nexport function itemTagged(item) {\r\n  return item.tag || false;\r\n}\r\n\r\nexport default Phylotree;\r\n","import * as _ from \"underscore\";\r\n\r\n/*\r\n *  given a tree, this function will compute quantities required to work with \r\n *  all v all pairwise distances (like in COT) \r\n *\r\n *  @param   tree the tree object\r\n *  @returns leaf count\r\n *\r\n */\r\nfunction computePairwiseDistances(tree) {\r\n  /*\r\n   *    traverse the tree and populate the following values in each node\r\n   *        \r\n   *        .cot_computed_length -> for each node (except the root), the current branch length \r\n   *                                (so as to not compute them each time via a callback) \r\n   *        .cot_leaf_index      -> post_order traversal order of a leaf (0 to number of leaves - 1)\r\n   *        \r\n   *        for each node\r\n   *        \r\n   *        .cot_path_to_leaves_below   \r\n   *                             -> a dictionary that maps a leaf index to the total path length from this node\r\n   *                                to each of the descendant leaves, EXCLUDING the length of this branch\r\n   *\r\n   *        .cot_path_to_leaves_above   \r\n   *                             -> a dictionary that maps a leaf index to the total path length from this node\r\n   *                                to each of the leaves outside the split defined by this node, EXCLUDING\r\n   *                                the length of this branch\r\n   */\r\n\r\n  var bl = tree.branch_length_accessor;\r\n\r\n  if (!bl) {\r\n    throw \"A non-null branch lengths accessor function is required for this operation\";\r\n  }\r\n\r\n  var leaf_count = 0;\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    n.cot_computed_length = bl(n);\r\n\r\n \r\n    if (n.parent && _.isUndefined(n.cot_computed_length)) {\r\n      throw \"Non-null branch lengths are required for this operation: missing branch length at node \" + n.data.name;\r\n    }\r\n\r\n    if (tree.isLeafNode(n)) {\r\n      n.cot_leaf_index = leaf_count++;\r\n      n.cot_path_to_leaves_below = {};\r\n      n.cot_path_to_leaves_below[n.cot_leaf_index] = 0;\r\n      n.cot_path_to_leaves_above = {};\r\n    } else {\r\n      n.cot_path_to_leaves_below = {};\r\n      n.cot_path_to_leaves_above = {};\r\n    }\r\n  });\r\n\r\n  // populate all cot_path_to_leaves_below\r\n  tree.traverse_and_compute(function(n) {\r\n    if (n.parent) {\r\n      _.each(n.cot_path_to_leaves_below, function(length_so_far, leaf_index) {\r\n        n.parent.cot_path_to_leaves_below[leaf_index] =\r\n          length_so_far + n.cot_computed_length;\r\n      });\r\n    }\r\n  });\r\n\r\n  // populate all cot_path_to_leaves_above; this is done via a 'pre-order' traversal\r\n  // handle root node first\r\n  var root_node = tree.getRootNode();\r\n\r\n  function CopyFromSiblings(a_node) {\r\n    for (var this_node = 0; this_node < a_node.children.length; this_node++) {\r\n      for (\r\n        var other_node = 0;\r\n        other_node < a_node.children.length;\r\n        other_node++\r\n      ) {\r\n        if (this_node != other_node) {\r\n          _.each(a_node.children[other_node].cot_path_to_leaves_below, function(\r\n            length,\r\n            index\r\n          ) {\r\n            if (a_node.children[this_node].cot_path_to_leaves_above) {\r\n              a_node.children[this_node].cot_path_to_leaves_above[index] =\r\n                length + a_node.children[other_node].cot_computed_length;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  CopyFromSiblings(root_node);\r\n\r\n  // takes two passes\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    if (n.parent) {\r\n      // copy parent's 'above' nodes\r\n      _.each(n.parent.cot_path_to_leaves_above, function(\r\n        length_so_far,\r\n        leaf_index\r\n      ) {\r\n        n.cot_path_to_leaves_above[leaf_index] =\r\n          length_so_far + n.parent.cot_computed_length;\r\n      });\r\n\r\n      if (!tree.isLeafNode(n)) {\r\n        CopyFromSiblings(n);\r\n      }\r\n      // copy sibling's 'below' nodes\r\n    }\r\n  }, \"pre-order\");\r\n\r\n  return leaf_count;\r\n}\r\n\r\nexport default computePairwiseDistances;\r\n","import * as _ from \"underscore\";\r\n\r\nfunction annotateCopyNumber(tree) {\r\n  tree.traverse_and_compute(function(node) {\r\n    if (tree.isLeafNode(node)) {\r\n      node.data.copy_number = 1;\r\n    }\r\n  });\r\n}\r\n\r\n// internal function used by best root fitting\r\nfunction computeRootToTipOtherRoot(\r\n  tree,\r\n  node,\r\n  coming_from,\r\n  shared_distance,\r\n  distance_to_new_root\r\n) {\r\n\r\n  var my_bl = tree.branch_length(node);\r\n\r\n  var go_up = false;\r\n\r\n  if (!coming_from) {\r\n    shared_distance = node.data.rootToTip;\r\n    distance_to_new_root = 0;\r\n    go_up = true;\r\n  }\r\n\r\n  if (node.children) {\r\n    for (var c = 0; c < node.children.length; c++) {\r\n      if (node.children[c] != coming_from) {\r\n        computeRootToTipOtherRoot(\r\n          tree,\r\n          node.children[c],\r\n          node,\r\n          shared_distance,\r\n          distance_to_new_root\r\n        );\r\n      } else {\r\n        go_up = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  node.data.rtta = node.data.rootToTip - shared_distance + distance_to_new_root;\r\n\r\n  if (go_up) {\r\n    shared_distance -= my_bl;\r\n    distance_to_new_root += my_bl;\r\n  }\r\n\r\n  if (node.parent && go_up) {\r\n    computeRootToTipOtherRoot(\r\n      tree,\r\n      node.parent,\r\n      node,\r\n      shared_distance,\r\n      distance_to_new_root\r\n    );\r\n  }\r\n}\r\n\r\nexport function fitRootToTip(tree) {\r\n\r\n  var linear_data = [],\r\n    max_r2 = 0,\r\n    best_node = 0;\r\n\r\n  annotateCopyNumber(tree);\r\n  rootToTip(tree);\r\n\r\n  // To return if best node is the root already\r\n  tree.traverse_and_compute(function(node) {\r\n    if (tree.isLeafNode(node) && !_.isNull(node.data.decimal_date_value)) {\r\n      linear_data.push([node.data.decimal_date_value, node.data.rtta, node.data.copy_number]);\r\n    }\r\n  });\r\n\r\n  let best_fit = linearFit(linear_data);\r\n\r\n  tree.traverse_and_compute(function(node) {\r\n\r\n    if (tree.isLeafNode(node) && !_.isNull(node.data.decimal_date_value)) {\r\n\r\n      computeRootToTipOtherRoot(tree, node, null, 0, 0);\r\n\r\n      linear_data = [];\r\n\r\n      tree.traverse_and_compute(function(node) {\r\n        if (tree.isLeafNode(node) && !_.isNull(node.data.decimal_date_value)) {\r\n          linear_data.push([\r\n            node.data.decimal_date_value,\r\n            node.data.rtta,\r\n            node.data.copy_number\r\n          ]);\r\n        }\r\n      });\r\n\r\n      var fit = linearFit(linear_data),\r\n        r2 = fit[\"r2\"];\r\n\r\n      if (r2 > max_r2) {\r\n        max_r2 = r2;\r\n        best_node = node;\r\n        best_fit = fit;\r\n      }\r\n\r\n    }\r\n  });\r\n\r\n  return { root: best_node, fit: best_fit };\r\n\r\n}\r\n\r\n// linear fit of root to tip distances\r\nfunction linearFit(data) {\r\n\r\n  var ss = data.reduce(function(p, c) {\r\n      return c[2] + p;\r\n    }, 0), // sample count\r\n    sx = data.reduce(function(p, c) {\r\n      return c[2] * c[0] + p;\r\n    }, 0), // sum X\r\n    sy = data.reduce(function(p, c) {\r\n      return c[2] * c[1] + p;\r\n    }, 0), // sum Y\r\n    sxoss = sx / ss,\r\n    syoss = sy / ss;\r\n\r\n  var fitB = 0,\r\n    st2 = 0,\r\n    vary = 0;\r\n\r\n  data.forEach(function(point) {\r\n    var t = point[0] - sxoss;\r\n    st2 += point[2] * t * t;\r\n    fitB += point[2] * t * point[1];\r\n    vary += point[2] * (point[1] - syoss) * (point[1] - syoss);\r\n  });\r\n\r\n  fitB /= st2;\r\n\r\n  var a = (sy - sx * fitB) / ss;\r\n\r\n  var varres = 0;\r\n\r\n  data.forEach(function(point) {\r\n    var t = point[1] - a - fitB * point[0];\r\n    varres += point[2] * t * t;\r\n  });\r\n\r\n  return {\r\n    intercept: a,\r\n    slope: fitB,\r\n    r2: 1 - varres / vary,\r\n    \"var (intercept)\": Math.sqrt((1 + sx * sx / (ss * st2)) / ss),\r\n    \"var (slope)\": Math.sqrt(1 / st2)\r\n  };\r\n}\r\n\r\n/**\r\n *   fast and memory efficient root to tip distance calculator\r\n *   for each leaf node stores the current root to tip distance in \r\n *   the node.rootToTip field\r\n *   \r\n *   @param tree\r\n *   @return tree with rootToTip computed\r\n *\r\n */\r\nexport default function rootToTip(tree) {\r\n\r\n  var bl = tree.branch_length_accessor,\r\n    index = 0;\r\n\r\n  tree.traverse_and_compute(n => {\r\n    if (n.parent) {\r\n      n.data._computed_length = bl(n);\r\n      if (!_.isNumber(n.data._computed_length)) {\r\n        throw \"rootToTip cannot be run on trees with missing branch lengths\";\r\n      }\r\n    }\r\n    if (tree.isLeafNode(n)) {\r\n      n.data.leaf_index = index++;\r\n    }\r\n    if (\"r2t\" in n.data) {\r\n      delete n.data.r2t;\r\n    }\r\n  });\r\n\r\n  tree.traverse_and_compute(n => {\r\n    if (n.parent) {\r\n      if (!(\"r2t\" in n.parent.data)) {\r\n        n.parent.data.r2t = {};\r\n      }\r\n      if (tree.isLeafNode(n)) {\r\n        n.parent.data.r2t[n.data.leaf_index] = n.data._computed_length;\r\n      } else {\r\n        _.each(n.data.r2t, function(v, idx) {\r\n          n.parent.data.r2t[idx] = v + n.data._computed_length;\r\n        });\r\n        delete n.data.r2t;\r\n      }\r\n      delete n.data._computed_length;\r\n    }\r\n  });\r\n\r\n  var r2t = tree.getRootNode().data.r2t;\r\n\r\n  tree.traverse_and_compute(n => {\r\n    if (tree.isLeafNode(n)) {\r\n      n.data.rootToTip = r2t[n.data.leaf_index] || 0;\r\n      delete n.data.leaf_index;\r\n    }\r\n  });\r\n\r\n  delete tree.getRootNode().data.r2t;\r\n\r\n  return tree;\r\n}\r\n","import * as _ from \"underscore\";\r\nimport { isLeafNode } from \"./nodes\";\r\n\r\nexport default function maxParsimony(respect_existing, attr_name) {\r\n\r\n  function populateMpMatrix(attr_name, d) {\r\n\r\n    d.mp = [\r\n      [0, 0], // score for parent selected / not selected\r\n      [false, false]\r\n    ]; // selected or not\r\n\r\n    if (isLeafNode(d)) {\r\n\r\n      d.mp[1][0] = d.mp[1][1] = d[attr_name] || false;\r\n      d.mp[0][0] = d.mp[1][0] ? 1 : 0;\r\n      d.mp[0][1] = 1 - d.mp[0][0];\r\n\r\n    } else {\r\n\r\n      d.children.forEach(pop_mp_mat);\r\n\r\n      var s0 = d.children.reduce(function(p, n) {\r\n        return n.mp[0][0] + p;\r\n      }, 0);\r\n\r\n      // cumulative children score if this node is 0\r\n      var s1 = d.children.reduce(function(p, n) {\r\n        return n.mp[0][1] + p;\r\n      }, 0);\r\n\r\n      // cumulative children score if this node is 1\r\n      // parent = 0\r\n\r\n      if (d[attr_name]) {\r\n        // respect selected\r\n        d.mp[0][0] = s1 + 1;\r\n        d.mp[1][0] = true;\r\n        d.mp[0][1] = s1;\r\n        d.mp[1][1] = true;\r\n      } else {\r\n        if (s0 < s1 + 1) {\r\n          d.mp[0][0] = s0;\r\n          d.mp[1][0] = false;\r\n        } else {\r\n          d.mp[0][0] = s1 + 1;\r\n          d.mp[1][0] = true;\r\n        }\r\n\r\n        // parent = 1\r\n\r\n        if (s1 < s0 + 1) {\r\n          d.mp[0][1] = s1;\r\n          d.mp[1][1] = true;\r\n        } else {\r\n          d.mp[0][1] = s0 + 1;\r\n          d.mp[1][1] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const pop_mp_mat = _.partial(populateMpMatrix, attr_name);\r\n  pop_mp_mat(this.nodes);\r\n\r\n  this.nodes.each(d => {\r\n    if (d.parent) {\r\n      d.mp = d.mp[1][d.parent.mp ? 1 : 0];\r\n    } else {\r\n      d.mp = d.mp[1][d.mp[0][0] < d.mp[0][1] ? 0 : 1];\r\n    }\r\n  });\r\n\r\n  this.display.modifySelection((d, callback) => {\r\n    if (isLeafNode(d.target)) {\r\n      return d.target[attr_name];\r\n    }\r\n    return d.target.mp;\r\n  });\r\n\r\n}\r\n","import * as _ from \"underscore\";\r\n\r\n/**\r\n * Return CSV of nodes sorted by longest branches.\r\n *\r\n * @returns {Array} An array of all tips and associated lengths of the form :\r\n * [{\r\n *    name : <tip_name>,\r\n *    length: <tip_length>\r\n * }, ...]\r\n */\r\n\r\nexport default function getTipLengths() {\r\n\r\n  // Get nodes and branch lengths\r\n  let self = this;\r\n  let tips = self.getTips();\r\n\r\n  // Transform to name, attribute key-pair and sort by attribute length, descending\r\n  let toExport = _.map(tips, d => { return {'name' : d.data.name, 'length' : parseFloat(d.data.attribute) } });\r\n  toExport = _.sortBy(toExport, d=> -d.length)\r\n  return toExport;\r\n  \r\n  \r\n}\r\n","import * as d3 from \"d3\";\r\nimport { isLeafNode } from \"./nodes\";\r\n\r\nconst default_date_converter = d3.timeParse(\"%Y%m%d\");\r\n\r\nconst default_regexp = /([0-9]{4}).?([0-9]{2}).?([0-9]{2})$/g;\r\n\r\nconst default_date_getter = function(node) {\r\n  if (isLeafNode(node)) {\r\n    if (\"name\" in node) {\r\n      let location = default_regexp.exec(node.name);\r\n      if (location) {\r\n        return location[1] + location[2] + location[3];\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/*\r\n *  Extracts dates from nodes using a provided callback (defaults supplied),\r\n *  and also converts them to decimal dates; missing dates are allowed; if desired, missing dates \r\n *  can throw exceptions \r\n *  \r\n *  @param tree             : the tree object \r\n *\r\n *  @param date_getter      : a function that extracts date strings from nodes (e.g. by parsing the name),\r\n *                            default is to extract from the end of the node name, using [YYYY] optional sep [MM] optional sep [DD] format;\r\n *                            default is implemented in phylotree_extensions.extract_dates.date_getter ()\r\n *                            \r\n *  @param date_converter   : if provided, will be used to parse the date string; default is %Y%m%d implemented in \r\n *                            phylotree_extensions.extract_dates.date_converter\r\n *  \r\n *  \r\n *  @return tree with date-annotated nodes, i.e. each node will have\r\n *  \r\n *      n.date_value (date object, e.g. 2018-08-17); null for missing\r\n *      n.decimal_date_value (decimal object, e.g. 2018.72)\r\n *  \r\n */\r\nconst extract_dates = function(tree, date_getter, date_converter=default_date_converter) {\r\n\r\n  date_getter = date_getter || default_date_getter;\r\n  \r\n  tree.traverse_and_compute(function(n) {\r\n    var d_string = date_getter(n);\r\n    if (d_string) {\r\n      try {\r\n        n.data.date_value = date_converter(d_string);\r\n        var full_year = n.data.date_value.getFullYear();\r\n        var year_start = new Date(full_year, 0, 1),\r\n          year_start_p1 = new Date(full_year + 1, 0, 1);\r\n\r\n        n.data.decimal_date_value =\r\n          full_year +\r\n          (n.data.date_value - year_start) / (year_start_p1 - year_start);\r\n        return;\r\n      } catch (e) {\r\n        // for conversion failures\r\n      }\r\n    }\r\n    n.data.date_value = null;\r\n    n.data.decimal_date_value = null;\r\n  });\r\n\r\n  return tree;\r\n};\r\n\r\nexport default extract_dates;\r\n","import * as _ from \"lodash\";\r\nimport { default as phylotree } from \"./main\";\r\n\r\nfunction remove(i, D) {\r\n  let dNew = [];\r\n\r\n  for (let j of _.range(D.length)) {\r\n    if (j != i) {\r\n      let dNewRow = [];\r\n      for (let k of _.range(D[j].length)) {\r\n        if (k != i) {\r\n          dNewRow.push(D[j][k]);\r\n        }\r\n      }\r\n      dNew.push(dNewRow);\r\n    }\r\n  }\r\n\r\n  return dNew;\r\n}\r\n\r\nfunction getDPrime(distanceMatrix, totalDistances, N) {\r\n  let DPrime = _.chunk(_.fill(Array(N * N), 0), N);\r\n  for (let i of _.range(N)) {\r\n    for (let j of _.range(_.parseInt(i) + 1, N)) {\r\n      DPrime[i][j] =\r\n        (N - 2) * distanceMatrix[i][j] - totalDistances[i] - totalDistances[j];\r\n      DPrime[j][i] = DPrime[i][j];\r\n    }\r\n  }\r\n  return DPrime;\r\n}\r\n\r\nfunction ijMinDPrime(dPrime, N) {\r\n  let i = -1;\r\n  let j = -1;\r\n  let minD = Infinity;\r\n  for (let ii of _.range(N)) {\r\n    for (let jj of _.range(i, N)) {\r\n      if (dPrime[ii][jj] < minD) {\r\n        i = ii;\r\n        j = jj;\r\n        minD = dPrime[i][j];\r\n      }\r\n    }\r\n  }\r\n  return [i, j, minD];\r\n}\r\n\r\nfunction createDelta(totalDistances, N) {\r\n  let deltaMatrix = _.chunk(Array(N * N), N);\r\n\r\n  for (let i of _.range(N)) {\r\n    for (let j of _.range(parseInt(i) + 1, N)) {\r\n      deltaMatrix[i][j] = (totalDistances[i] - totalDistances[j]) / (N - 2);\r\n      deltaMatrix[j][i] = deltaMatrix[i][j];\r\n    }\r\n  }\r\n\r\n  return deltaMatrix;\r\n}\r\n\r\nexport function getDistanceMatrix(seqs) {\r\n  // Gaps are masked\r\n\r\n  let initKey = _.keys(seqs)[0];\r\n  let seqLength = seqs[initKey].length;\r\n\r\n  return _.mapValues(seqs, (seq) =>\r\n    _.map(seqs, (seq2) =>\r\n      _.sum(\r\n        _.map(\r\n          _.range(seqLength),\r\n          (i) => seq[i] != seq2[i] && seq[i] != \"-\" && seq2[i] != \"-\"\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n\r\nfunction getTotalDistances(distanceMatrix) {\r\n  return _.map(distanceMatrix, _.sum);\r\n}\r\n\r\n/**\r\n * Create a neighbor joining tree from a distance matrix\r\n * See test/neighbor-join-test.js for a working example\r\n *\r\n * @param {Array} distanceMatrixArr The NxN distance matrix.\r\n *\tconst D = [\r\n *\t\t\t[0,  5,  9,  9, 8],\r\n *\t\t\t[5,  0, 10, 10, 9],\r\n *\t\t\t[9, 10,  0,  8, 7],\r\n *\t\t\t[9, 10,  8,  0, 3],\r\n *\t\t\t[8,  9,  7,  3, 0]\r\n * \t];\r\n * \r\n * @param {Number} n The dimension of the distanceMatrixArr.\r\n * @param {Array} nodeList The names of each row in the distanceMatrix\r\n * @returns The neighbor joining new tree.\r\n */\r\nexport default function neighborJoining(distanceMatrixArr, n, nodeList) {\r\n  if (n <= 2) {\r\n    let tree = new phylotree(\"\");\r\n\r\n    //T.link(nodeList[0],nodeList[1],D[0][1])\r\n\r\n    let newNode = tree.getNodes();\r\n    // Get root\r\n    let distance = distanceMatrixArr[0][1] / 2;\r\n\r\n    let nodeA = tree.createNode(nodeList[0], [null, [distance]]);\r\n    let nodeB = tree.createNode(nodeList[1], [null, [distance]]);\r\n\r\n    //// Add the children to the newly created node\r\n    tree.addChild(newNode, nodeA);\r\n    tree.addChild(newNode, nodeB);\r\n\r\n    return tree;\r\n  } else {\r\n    let N = n;\r\n    let totalDistances = getTotalDistances(distanceMatrixArr);\r\n    let dPrime = getDPrime(distanceMatrixArr, totalDistances, N);\r\n    let [i, j, minD] = ijMinDPrime(dPrime, N);\r\n    let deltaMatrix = createDelta(totalDistances, N);\r\n    let limbLengthI = (distanceMatrixArr[i][j] + deltaMatrix[i][j]) / 2;\r\n    let limbLengthJ = (distanceMatrixArr[i][j] - deltaMatrix[i][j]) / 2;\r\n    let newRow = _.concat(\r\n      0,\r\n      _.filter(\r\n        _.map(_.range(n), (k) => {\r\n          if (k != i && k != j) {\r\n            return (\r\n              0.5 *\r\n              (distanceMatrixArr[k][i] +\r\n                distanceMatrixArr[k][j] -\r\n                distanceMatrixArr[i][j])\r\n            );\r\n          }\r\n        }),\r\n        _.isNumber\r\n      )\r\n    );\r\n\r\n    let nodeI = nodeList[i];\r\n    let nodeJ = nodeList[j];\r\n\r\n    // Get all nodes of type InternalNode{x} and increment number.\r\n    // If there are none, start with InternalNode0\r\n    let m = \"InternalNode0\";\r\n    let internalNodes = _.filter(nodeList, (x) =>\r\n      _.includes(x, \"InternalNode\")\r\n    );\r\n\r\n    if (internalNodes.length) {\r\n      let highestNum = _.max(\r\n        _.map(internalNodes, (label) => _.split(label, \"InternalNode\")[1])\r\n      );\r\n      m = \"InternalNode\" + ++highestNum;\r\n    }\r\n\r\n    nodeList.unshift(m);\r\n\r\n    distanceMatrixArr = remove(_.max([i, j]), distanceMatrixArr);\r\n    distanceMatrixArr = remove(_.min([i, j]), distanceMatrixArr);\r\n\r\n    distanceMatrixArr.unshift(newRow);\r\n\r\n    _.each(_.range(1, n - 1), (l) => distanceMatrixArr[l].unshift(newRow[l]));\r\n\r\n    // Remove from nodeList\r\n    _.remove(nodeList, (n) => n == nodeI || n == nodeJ);\r\n    let tree = neighborJoining(distanceMatrixArr, N - 1, nodeList);\r\n\r\n    let treeNodeI = tree.createNode(nodeI, [null, [limbLengthI]]);\r\n    let treeNodeJ = tree.createNode(nodeJ, [null, [limbLengthJ]]);\r\n\r\n    // If the node doesn't exist, create. Otherwise, reassign the length\r\n    if (tree.getNodeByName(m)) {\r\n      let internalNode = tree.getNodeByName(m);\r\n      tree.addChild(internalNode, treeNodeI);\r\n      tree.addChild(internalNode, treeNodeJ);\r\n    } else {\r\n      let newNode = tree.createNode(m, [null, [0]]);\r\n      tree.addChild(tree.getNodes(), newNode);\r\n      // Add the children to the newly created node\r\n      tree.addChild(newNode, treeNodeI);\r\n      tree.addChild(newNode, treeNodeJ);\r\n    }\r\n\r\n    // Set negative to 0 and add distance to other limblength\r\n    return tree;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import * as _ from \"underscore\";\r\n\r\n/*\r\n *special case for L^2\r\n *\r\n *For a fixed branch B, we have one parameter : where to break the branch `t` in [0, T], \r\n *where T is the branch length\r\n *\r\n *D   = sum (a is a leaf above B) [d(B,a) + (T-t)] ^ 2 +\r\n *      sum (b is a leaf below B) [d(B,b) + t] ^ 2;\r\n *      \r\n *expanding, we have \r\n *\r\n *D   = sum (a is a leaf above B) [d^2 (B,a) + 2(T-t) d(B,a) + (T-t)^2]\r\n *      sum (b is a leaf below B) [d^2 (B,b) + 2(t) d(B,b) + t^2]\r\n *      \r\n *    = (sum distances above)^2 + sum (distances above)*2(T-t) + (T-t)^2 * # leaves_above\r\n *      (sum distances below)^2 + sum (distances below)*2*t    + t^2 * # leaves_below\r\n *\r\n *      \r\n *Taking a derivative with respect to t we have\r\n *\r\n *dD / dt = - 2 sum (a is a leaf above B) [d(B,a) + (T-t)]\r\n *          + 2 sum (b is a leaf below B) [d(B,b) + t]\r\n *          \r\n *\r\n *second derivative is positive the function is convex, so can set to the nearest boundary if solution is outside range\r\n *\r\n *setting dD / dt to zero, we have \r\n *\r\n *- sum (distances leaves above) - T * (#leaves above) + t * (#leaves above) + sum (distances leaves below) + t * (#leaves below) = 0\r\n *\r\n *t = [sum (distances leaves above) - sum (distances leaves below) + T * (#leaves above)] / (#leaves)\r\n */\r\n\r\nimport { default as pairwise_distances } from \"./pairwise-distances\";\r\n\r\nexport function centerOfTree(tree, power) {\r\n  power = power || 2;\r\n\r\n  var leaf_count = pairwise_distances(tree);\r\n\r\n  var current_min = Number.MAX_VALUE,\r\n    current_split = 0,\r\n    current_location = null;\r\n\r\n  if (power == 2) {\r\n    tree.traverse_and_compute(function(n) {\r\n      if (n.parent) {\r\n        // can't consider the root\r\n        var sum_below = 0,\r\n          sum_below_squared = 0,\r\n          sum_above = 0,\r\n          sum_above_squared = 0;\r\n\r\n        var count_below = 0;\r\n\r\n        _.each(n.cot_path_to_leaves_below, function(l) {\r\n          sum_below += l;\r\n          sum_below_squared += l * l;\r\n          count_below++;\r\n        });\r\n\r\n        _.each(n.cot_path_to_leaves_above, function(l) {\r\n          sum_above += l;\r\n          sum_above_squared += l * l;\r\n        });\r\n\r\n        var count_above = leaf_count - count_below;\r\n\r\n        var tt =\r\n          (sum_above - sum_below + n.cot_computed_length * count_above) /\r\n          leaf_count;\r\n        if (tt < 0) {\r\n          tt = 0;\r\n        } else if (tt > n.cot_computed_length) {\r\n          tt = n.cot_computed_length;\r\n        }\r\n\r\n        var score =\r\n          sum_above_squared +\r\n          sum_below_squared +\r\n          2 * (sum_above * (n.cot_computed_length - tt) + sum_below * tt) +\r\n          count_below * tt * tt +\r\n          (n.cot_computed_length - tt) *\r\n            (n.cot_computed_length - tt) *\r\n            count_above;\r\n\r\n        if (score < current_min) {\r\n          current_location = n;\r\n          current_split = tt / n.cot_computed_length; //n.cot_computed_length-tt;//1 - tt / n.cot_computed_length;\r\n          current_min = score;\r\n        }\r\n\r\n        delete n.cot_computed_length;\r\n        delete n.cot_path_to_leaves_below;\r\n        delete n.cot_path_to_leaves_above;\r\n        delete n.cot_leaf_index;\r\n      }\r\n    });\r\n  } else {\r\n    // in the general case try a simple grid optimization\r\n    tree.traverse_and_compute(function(n) {\r\n      if (n.parent) {\r\n        // can't consider the root\r\n\r\n        var optimization_step =\r\n            n.cot_computed_length > 0.0 ? n.cot_computed_length * 0.05 : 0.1,\r\n          current_t = 0;\r\n\r\n        while (current_t < n.cot_computed_length) {\r\n          var score = 0.0;\r\n\r\n          _.each(n.cot_path_to_leaves_below, function(l) {\r\n            score += Math.pow(l + current_t, power);\r\n          });\r\n\r\n          _.each(n.cot_path_to_leaves_above, function(l) {\r\n            score += Math.pow(l + (n.cot_computed_length - current_t), power);\r\n          });\r\n\r\n          if (score < current_min) {\r\n            current_location = n;\r\n            current_split = current_t / n.cot_computed_length; //n.cot_computed_length-tt;//1 - tt / n.cot_computed_length;\r\n            current_min = score;\r\n          }\r\n          current_t += optimization_step;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    location: current_location,\r\n    breakpoint: current_split,\r\n    distance: current_min\r\n  };\r\n}\r\n","import * as _ from \"underscore\";\r\n\r\n/**\r\n * Implements a linear time / space version of the Cluster picker algorithm\r\n * \r\n * @param tree -- the tree object \r\n * @param bootstrap_thresold -- value in [0,1] that sets the stringency of bootstrap support\r\n * @param diameter_threshold -- value >=0 that defines the maximum allowable pairwise distance in a cluster\r\n * @param root_node -- if specified, traverse the tree starting here (useful for only looking at parts of the tree),\r\n * tree root by default\r\n * @param missing_bootstrap_value -- if a branch is missing bootstrap support value, use this value instead\r\n *                   (1.0 by default)\r\n *                                 \r\n * @return an array of clusters, where cluster = \r\n * \\{\r\n *    'root'   : [root node of cluster],\r\n *    'members' : [list of leaf. nodes],\r\n *    'diameter' : max distance in the cluster,\r\n *    'bootstrap' : bootstrap support at the root node\r\n * \\}                        \r\n */\r\nfunction clusterPicker(\r\n  tree,\r\n  bootstrap_threshold,\r\n  diameter_threshold,\r\n  root_node,\r\n  missing_bootstrap_value\r\n) {\r\n  root_node = root_node || tree.getRootNode();\r\n  missing_bootstrap_value = _.isNumber(missing_bootstrap_value)\r\n    ? missing_bootstrap_value\r\n    : 1;\r\n\r\n  // perform a bottom-up pass of the tree\r\n  // where each internal node will receive a floating point value\r\n  // that stores the longest path from the internal node to any of its descendants,\r\n  // the diameter of the cluster,  is then the sum of longest paths of all of its children\r\n  let bl = tree.branch_length;\r\n\r\n  // initialize member variables\r\n  tree.traverse_and_compute(function(n) {\r\n    if (n.parent) {\r\n      n._computed_length = bl(n);\r\n      if (!_.isNumber(n._computed_length)) {\r\n        throw \"clusterPicker cannot be run on trees with missing branch lengths\";\r\n      }\r\n      n.max_path_length = 0;\r\n    }\r\n  });\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    if (n.parent) {\r\n      n.parent.max_path_length = Math.max(\r\n        n.parent.max_path_length,\r\n        n.max_path_length + n._computed_length\r\n      );\r\n    }\r\n  });\r\n\r\n  var clusters = [];\r\n\r\n  tree.traverse_and_compute(_.noop, \"pre-order\", root_node, function(n) {\r\n    if (!tree.isLeafNode(n)) {\r\n      var bs = _.isString(n.data.bootstrap_values)\r\n        ? +n.data.bootstrap_values\r\n        : missing_bootstrap_value;\r\n\r\n      if (bs >= bootstrap_threshold) {\r\n        var my_diameter = _.reduce(\r\n          n.children,\r\n          function(c, n) {\r\n            return n.max_path_length + n._computed_length + c;\r\n          },\r\n          0\r\n        );\r\n\r\n        if (my_diameter <= diameter_threshold) {\r\n          clusters.push({ root: n, diameter: my_diameter, bootstrap: bs });\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // clean up member variables\r\n  tree.traverse_and_compute(\r\n    function(n) {\r\n      if (n.parent) {\r\n        delete n._computed_length;\r\n        delete n.max_path_length;\r\n      }\r\n    },\r\n    \"post-order\",\r\n    root_node\r\n  );\r\n\r\n  _.each(clusters, function(cluster) {\r\n    cluster[\"members\"] = [];\r\n    tree.traverse_and_compute(\r\n      function(n) {\r\n        if (tree.isLeafNode(n)) {\r\n          cluster[\"members\"].push(n);\r\n        }\r\n      },\r\n      \"post-order\",\r\n      cluster[\"root\"]\r\n    );\r\n  });\r\n\r\n  return clusters;\r\n}\r\n\r\nexport default clusterPicker;\r\n","/**\r\n * Compute midpoint of a phylogenetic tree\r\n * \r\n * @param {Object} tree -- the phylotree.js tree object \r\n * @return {Object} the calculated midpoint to root on\r\n *  { location: root_node, breakpoint: 0 }\r\n *\r\n */\r\nexport function computeMidpoint(tree) {\r\n  if (!tree.hasBranchLengths()) {\r\n    throw \"Center of tree calculation cannot be performed on trees that do not have fully specified branch lengths\";\r\n  }\r\n\r\n  var bl = tree.branch_length;\r\n\r\n  tree.traverse_and_compute(function(node) {\r\n    if (node.parent) {\r\n      var my_longest_path_length = bl(node);\r\n      var my_longest_path_terminus;\r\n\r\n      if (tree.isLeafNode(node)) {\r\n        my_longest_path_terminus = node;\r\n        node.max_path = 0;\r\n        node.max_path_terminus = node;\r\n      } else {\r\n        my_longest_path_length += node.max_path;\r\n        my_longest_path_terminus = node.max_path_terminus;\r\n      }\r\n\r\n      if (\r\n        !node.parent.max_path ||\r\n        node.parent.max_path < my_longest_path_length\r\n      ) {\r\n        node.parent.max_path = my_longest_path_length;\r\n        node.parent.max_path_terminus = my_longest_path_terminus;\r\n      }\r\n    }\r\n  });\r\n\r\n  var root_node = tree.getRootNode();\r\n  var longest_path_length = 0;\r\n\r\n  root_node.children.forEach(function(root_child) {\r\n    if (root_child.max_path_terminus !== root_node.max_path_terminus) {\r\n      var pl = root_child.max_path + bl(root_child);\r\n      if (pl >= longest_path_length) {\r\n        longest_path_length = pl;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (root_node.max_path > longest_path_length) {\r\n    // not already midpoint rooted\r\n    longest_path_length = (longest_path_length + root_node.max_path) * 0.5;\r\n\r\n    // start traversing up from the deepest leaf to the root, until we find the\r\n    // half-way point\r\n\r\n    var root_on = root_node.max_path_terminus;\r\n\r\n    while (true) {\r\n      var current_bl = bl(root_on);\r\n      //console.log (current_bl, longest_path_length);\r\n      if (current_bl <= longest_path_length) {\r\n        longest_path_length -= current_bl;\r\n        root_on = root_on.parent;\r\n      } else {\r\n        //console.log (\"Rooting on \", root_on, longest_path_length[0], current_bl);\r\n\r\n        return {\r\n          location: root_on,\r\n          breakpoint: longest_path_length / current_bl\r\n        };\r\n\r\n        //console.log (\"Longest \" + root_path (tree.getNodeByName(root_node.max_path_terminus.name)));\r\n        //console.log (\"Second longest \" + root_path (tree.getNodeByName(longest_path_length[1].name)));\r\n      }\r\n    }\r\n  }\r\n  return { location: root_node, breakpoint: 0 };\r\n}\r\n","import * as _ from \"lodash\";\r\n\r\nexport default function parseFasta(fastaData) {\r\n\r\n\r\n  let sfasta = _.split(fastaData, \"\\n\");\r\n\r\n  let seqs = _.chain(sfasta)\r\n    .map((d, i) => (d.startsWith(\">\") ? i : -1))\r\n    .filter((d) => d != -1)\r\n    .map((d, i, c) => _.slice(sfasta, c[i], c[i + 1]))\r\n    .keyBy((d) => _.trim(d[0], \">\"))\r\n    .mapValues((d) => _.tail(d).join(\"\"))\r\n    .value();\r\n\r\n  return seqs;\r\n\r\n}\r\n","import * as _ from \"underscore\";\r\n\r\n/*\r\n *Implements a linear time / space version of the Phylopart algorithm\r\n *Nature Communications volume 2, Article number: 321 (2011)\r\n *\r\n *@param tree                 -- the tree object \r\n *\r\n *@param bootstrap_thresold -- value in [0,1] that sets the stringency of bootstrap support\r\n *\r\n *@param percentile threshold -- a value in 0-1, which is used to delineate how clusters\r\n *                               are defined; the actual criterion used is \r\n *        [approximate] median pairwise distance in a cluster <= %-le of tree-wide distribution \r\n *                               \r\n *@param missing_bootstrap_value -- if a branch is missing bootstrap support value, use this value instead\r\n *                    (1.0 by default)\r\n *                    \r\n *@param resolution -- the width of the bin for the histogram; by default is set to be the   \r\n *                     minimum of 0.001, branch length range / 100,\r\n *                     however, the maximum number of histogram bins is capped at 500 for \r\n *                     performance reasons\r\n *                                 \r\n *@return an array of clusters, where cluster = \r\n *{\r\n *    'root'              : [root node of cluster]\r\n *    'members'           : [list of leaf. nodes]\r\n *    'median'            : approximate median cluster distance,\r\n *    'bootstrap'         : bootstrap support at the root node\r\n *}                        \r\n */\r\n\r\nimport { default as pairwise_distances } from \"../metrics/pairwise-distances\";\r\n\r\nfunction phylopart(\r\n  tree,\r\n  bootstrap_threshold,\r\n  percentile_threshold,\r\n  missing_bootstrap_value,\r\n  resolution\r\n) {\r\n  /** TODO SLKP 20180817 : this implementation does not compute pairwise distances correctly at the moment;\r\n   instead it computes root-to-tip distances */\r\n  missing_bootstrap_value = _.isNumber(missing_bootstrap_value)\r\n    ? missing_bootstrap_value\r\n    : 1;\r\n\r\n  var leaf_count = pairwise_distances(tree);\r\n\r\n  /** first, decide on the domain of branch lengths **/\r\n\r\n  var core_node = tree.getRootNode().children[0];\r\n\r\n  var min_bl = Number.MAX_VALUE,\r\n    min_bl2 = Number.MAX_VALUE;\r\n\r\n  if (!(percentile_threshold > 0 && percentile_threshold < 1)) {\r\n    throw \"Invalid percentile threshold in perform_phylopart\";\r\n  }\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    if (tree.isLeafNode(n)) {\r\n      if (n.cot_computed_length < min_bl) {\r\n        if (min_bl < min_bl2) {\r\n          min_bl2 = min_bl;\r\n        }\r\n        min_bl = n.cot_computed_length;\r\n      } else {\r\n        if (n.cot_computed_length < min_bl2) {\r\n          min_bl2 = n.cot_computed_length;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  min_bl += min_bl2;\r\n\r\n  // pairwise distances are bounded below by the sum of two shortest terminal branches\r\n\r\n  // compute the upper bound\r\n  var max_path_length =\r\n    _.reduce(\r\n      core_node.cot_path_to_leaves_below,\r\n      function(c, n) {\r\n        return n > c ? n : c;\r\n      },\r\n      0\r\n    ) +\r\n    _.reduce(\r\n      core_node.cot_path_to_leaves_above,\r\n      function(c, n) {\r\n        return n > c ? n : c;\r\n      },\r\n      0\r\n    ) +\r\n    core_node.cot_computed_length;\r\n\r\n  var domain = max_path_length - min_bl;\r\n\r\n  if (_.isUndefined(resolution)) {\r\n    resolution = Math.min(1e-3, domain / 100);\r\n  }\r\n\r\n  var number_of_bins = ((domain / resolution) >> 0) + 1;\r\n  if (number_of_bins > 500) {\r\n    number_of_bins = 500;\r\n    resolution = domain / number_of_bins;\r\n  }\r\n\r\n  var root_node = tree.getRootNode();\r\n\r\n  root_node.paths_to_leaves = new Array(leaf_count);\r\n\r\n  _.each(root_node.children, function(cn) {\r\n    _.each(root_node.cot_path_to_leaves_below, function(v, i) {\r\n      root_node.paths_to_leaves[i] = v + cn.cot_computed_length;\r\n    });\r\n  });\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    if (!tree.isLeafNode(n)) {\r\n      n.histogram = new Array(number_of_bins);\r\n      for (var i = 0; i < number_of_bins; i++) {\r\n        n.histogram[i] = 0;\r\n      }\r\n      if (n.parent) {\r\n        var index = 0;\r\n        n.paths_to_leaves = [];\r\n        _.each(n.cot_path_to_leaves_below, function(v, i) {\r\n          n.paths_to_leaves[index++] = v;\r\n        });\r\n      }\r\n    }\r\n    delete n.cot_path_to_leaves_above;\r\n    delete n.cot_path_to_leaves_below;\r\n  });\r\n\r\n  /**\r\n        for each internal node, produce a histogram of pairwise distances on sequences that are defined \r\n        by the subtree at that node\r\n        \r\n        this could be approximated (I think), by merging histograms of children\r\n    */\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    if (!tree.isLeafNode(n)) {\r\n      for (var n1 = 0; n1 < n.paths_to_leaves.length; n1++) {\r\n        for (var n2 = n1 + 1; n2 < n.paths_to_leaves.length; n2++) {\r\n          var sum = n.paths_to_leaves[n1] + n.paths_to_leaves[n2];\r\n          n.histogram[((sum - min_bl) / resolution) >> 0]++;\r\n        }\r\n      }\r\n      n.leaf_count = n.paths_to_leaves.length;\r\n\r\n      delete n.paths_to_leaves;\r\n    }\r\n  });\r\n\r\n  // compute the percentile distance cutoff\r\n\r\n  var total_comparisons =\r\n    (leaf_count - 1) * leaf_count / 2 * percentile_threshold;\r\n  var bin_i = 0;\r\n  for (\r\n    ;\r\n    bin_i < number_of_bins - 1 &&\r\n    total_comparisons > root_node.histogram[bin_i];\r\n    bin_i++\r\n  ) {\r\n    total_comparisons -= root_node.histogram[bin_i];\r\n  }\r\n\r\n  var median_threshold =\r\n    min_bl +\r\n    (bin_i +\r\n      (root_node.histogram[bin_i] - total_comparisons) /\r\n        root_node.histogram[bin_i]) *\r\n      resolution;\r\n\r\n  var clusters = [];\r\n\r\n  tree.traverse_and_compute(_.noop, \"pre-order\", null, function(n) {\r\n    if (!tree.isLeafNode(n)) {\r\n      var bs = _.isString(n.data.bootstrap_values)\r\n        ? +n.data.bootstrap_values\r\n        : missing_bootstrap_value;\r\n      if (bs >= bootstrap_threshold) {\r\n        var total_comparisons = n.leaf_count * (n.leaf_count - 1) * 0.25;\r\n\r\n        var bin_i = 0;\r\n        for (\r\n          ;\r\n          bin_i < number_of_bins - 1 && total_comparisons > n.histogram[bin_i];\r\n          bin_i++\r\n        ) {\r\n          total_comparisons -= n.histogram[bin_i];\r\n        }\r\n\r\n        var my_median =\r\n          min_bl +\r\n          (bin_i +\r\n            (n.histogram[bin_i] - total_comparisons) / n.histogram[bin_i]) *\r\n            resolution;\r\n\r\n        if (my_median <= median_threshold) {\r\n          clusters.push({ root: n, median: my_median, bootstrap: bs });\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  tree.traverse_and_compute(function(n) {\r\n    if (!tree.isLeafNode(n)) {\r\n      if (\"histogram\" in n) {\r\n        delete n.histogram;\r\n        delete n.leaf_count;\r\n      }\r\n    }\r\n  });\r\n\r\n  _.each(clusters, function(cluster) {\r\n    cluster[\"members\"] = [];\r\n    tree.traverse_and_compute(\r\n      function(n) {\r\n        if (tree.isLeafNode(n)) {\r\n          cluster[\"members\"].push(n);\r\n        }\r\n      },\r\n      \"post-order\",\r\n      cluster[\"root\"]\r\n    );\r\n  });\r\n\r\n  return clusters;\r\n}\r\n\r\nexport default phylopart;\r\n","import * as _ from \"underscore\";\r\n\r\n/*\r\n * The Sackin's index is computed as the sum of the number of ancestors for each\r\n * tips of the tree.\r\n *\r\n * The less balanced a tree is, the larger its Sackin's index.\r\n *\r\n */\r\n\r\nexport default function sackin(tree) {\r\n\r\n  // Get tips of tree\r\n  let tips = tree.getTips();\r\n\r\n  // Count number of ancestors to root for each tree\r\n  let depths = _.map(tips, d => { return d.depth });\r\n\r\n  return _.reduce(depths, function(memo, num){ return memo + num; }, 0);\r\n\r\n}\r\n"],"names":["isLeafNode","node","_","has","graftAt","newChild","newParent","lengths","nodes","this","descendants","parent","indexOf","parentIndex","children","newSplit","name","attribute","original_child_order","newNode","child","push","data","index","deleteANode","length","delete_me_idx","splice","forEach","d","filter","n","attributes","each","old_key","new_key","respect","selection_attribute_name","traits","newickParser","nwk_str","options","int_or_float","left_delimiter","right_delimiter","clade_stack","addNewTreeLevel","the_parent","finishNodeDefinition","this_node","pop","current_node_name","current_node_attribute","current_node_annotation","includes","split","slice","annotation","key","value","test","generateError","location","json","error","substring","automaton_state","quote_delimiter","name_quotes","'","\"","tree_json","space","char_index","current_char","e","parseAnnotations","buf","str","toUpperCase","data_str","map","trim","dimensions","startsWith","object","rest","format","symbols","reject","matrix","compact","mapObject","v","k","Array","loadAnnotations","tree","label","annotations","getTips","loadTree","trees","xmlToJson","xml","obj","nodeType","j","item","nodeName","nodeValue","hasChildNodes","childNodes","i","old","phyloxml_parser","phyloxml","phylogeny","clade","parsePhyloxml","branch_length","taxonomy","scientific_name","format_registry","nexml","xml_string","parseString","nexml_tree","node_list","$","node_hash","reduce","a","b","edges","id","roots","root","root_id","edge","source","parseNexml","targets","pluck","values","pick","nexus","nexus_parser","nwk","nhx","beast","newick","parsed_newick","parseBeastNode","tokens","token","replace","undefined","postOrder","callback","backtrack","next","preOrder","inOrder","current","reverse","leftChildRightSibling","multiway_parent","target","defBranchLengthAccessor","_node","new_length","_node_data","String","bl","parseFloat","isNaN","Math","max","console","warn","fraction","d3","hierarchy","Error","copy","new_json","__mapped_bl","branch_length_accessor","setBranchLength","remove_me","current_node","stashed_bl","noop","apportioned_bl","remove_idx","t","concat","new_node","extendOwn","update","traverse_and_compute","c","isUndefined","display","select","container","remove","selectionName","rendered_tree","render","selectionLabel","appendChild","show","dispatch","attr_name","store_name","my_value","selection","xCoord","y","yCoord","x","radialMapper","r","radial_center","sin","cos","cartesianToPolar","radius","radial_root_offset","scales","size","angle","PI","radial","drawArc","points","start","end","arcSegmentPlacer","where","draw_line","line","curve","curveStepBefore","lineSegmentPlacer","itemTagged","tag","itemSelected","css_classes","tree-container","tree-scale-bar","internal-node","tagged-node","selected-node","collapsed-node","root-node","branch","selected-branch","tagged-branch","tree-selection-brush","branch-tracer","node_text","nodeSpan","attr","arguments","predefined_selecters","all","none","all-leaf-nodes","all-internal-nodes","relative_nodeSpan","text_align","radius_pad_for_bubbles","right_most_leaf","screen_x","layout_listener_handler","syncEdgeLabels","selectionCallback","nodeVisible","hidden","notshown","nodeNotshown","hasHiddenNodes","isNodeCollapsed","collapsed","nodeCssSelectors","p","defNodeLabel","showInternalName","transitions","is_leaf","labels","selectAll","tracers","enter","append","classed","merge","on","handle_node_click","shown_font_size","text","_nodeLabel","style","ensure_size_is_in_px","d3PhylotreeSvgRotate","text_angle","d3PhylotreeSvgTranslate","alignTips","shiftTip","nodeBubbleSize","shift","circles","node_circle_size","min","node_styler","phylotree","i_names","internalNames","class_var","respect_existing","clearInternalNodes","modifySelection","cladeCssSelectors","enclosure","svg","node_id","collapsed_clades","spline","spline_f","curveBasis","coord","init_0","init_1","screen_y","exit","collapsed_clade","insert","edgeVisible","edgeCssSelectors","transition","reclassEdge","new_branch_path","draw_branch","datum","existing_path","haz_title","empty","edge_styler","links","countHandler","counts","countUpdate","edge_placer","d3_layout_phylotree_event_id","triggerRefresh","event","CustomEvent","detail","document","dispatchEvent","d3PhylotreeEventListener","refresh","d3PhylotreeAddEventListener","addEventListener","unhide","placenodes","tr","sizes","pad_radius","pad_width","vertical_offset","pad_height","scale","layoutHandler","d3_layout_phylotree_context_menu_id","menu_object","some","Boolean","menu_items","toggleCollapse","selectAllDescendants","pathToRoot","reroot","updateHasHiddenNodes","has_user_elements","show_divider_options","partial","rect","querySelector","getBoundingClientRect","clientX","clientY","condition","node_selecter","place","skip_refresh","mode","contains","keys","select_me","do_refresh","type","new_value","events.triggerRefresh","events.countUpdate","getSelection","terminal","internal","sel","constant","TreeRender","[object Object]","separation","_previous","fixed_width","font_size","scale_bar_font_size","offsets","draw_scale_bar","count_listener_handler","label_width","rescale_nodeSpan","default_options","layout","logger","branches","scaling","bootstrap","color-fill","internal-names","selectable","restricted-selectable","collapsible","left-right-spacing","top-bottom-spacing","left-offset","show-scale","draw-size-bubbles","bubble-styler","binary-selectable","is-radial","attribute-list","max-radius","annular-limit","compression","align-tips","maximum-per-node-spacing","minimum-per-node-spacing","maximum-per-level-spacing","minimum-per-level-spacing","brush","hide","label-nodes-with-name","zoom","show-menu","show-labels","node-styler","edge-styler","node-span","defaults","width","height","initialize_svg","initializeEdgeLabels","events.d3PhylotreeAddEventListener","_label_width","render_nodes.isNodeCollapsed","phylo_attr","svg_element","create","set_size","do_hierarchy","self","scale_bar","call","updateCollapsedClades","drawn_links","render_edges.edgeCssSelectors","render_edges.edgeVisible","drawEdge","drawn_nodes","render_nodes.nodeCssSelectors","render_nodes.nodeVisible","reclassNode","should_shift","drawNode","resizeSvg","brush_object","extent","selected_links","scaleExtent","transform","toTransform","a_node","_nodeSpan","last_node","last_span","_extents","is_under_collapsed_parent","save_x","save_span","render_nodes.nodeNotshown","undef_BL","do_scaling","max_depth","depth","_handle_single_node_layout","process_internal_node","map_me","count_undefined","half_way","displayed_children","managed_to_display","child_id","tree_layout","bind","at_least_one_dimension_fixed","available_width","last_child_angle","last_circ_position","last_child_radius","min_radius","effective_span","compute_distance","r1","r2","a1","a2","annular_shift","sqrt","max_r","my_circ_position","do_lr","required_spacing","radial_dist","local_mr","dd","st","scaler","z","last_point","pow","last_x","domain_limit","range_limit","ceil","log","stretch","scaleLinear","domain","range","scaleTickFormatter","axisTop","tickFormat","tickValues","round","my_ticks","ticks","skip_render","_font_size","node_width","abs","attr2","opt","arg","css","run_update","do_update","d3PhylotreeTriggerLayout","nodeDropdownMenu","extend","prototype","clades","render_nodes","render_edges","events","menus","Phylotree","newick_string","parsed_tags","partitions","isString","parser_registry","isFunction","contentType","_parsed_tags","Object","hasBranchLengths","traversal_type","json_export_index","node_array","node_copy","clone","JSON","stringify","root_node","computePairwiseDistances","leaf_count","CopyFromSiblings","other_node","cot_path_to_leaves_below","cot_path_to_leaves_above","cot_computed_length","cot_leaf_index","length_so_far","leaf_index","getRootNode","computeRootToTipOtherRoot","coming_from","shared_distance","distance_to_new_root","my_bl","go_up","rootToTip","rtta","linearFit","ss","sx","sy","sxoss","syoss","fitB","st2","vary","point","varres","intercept","slope","var (intercept)","var (slope)","_computed_length","isNumber","r2t","idx","node_operations.isLeafNode","mrca","mrca_nodes","from","mrca_node","union","intersection","every","getBranchLengths","branchName","nodeLabel","normalizeBranchLengths","branch_lengths","max_bl","min_bl","len","scaleBranchLengths","scale_by","getNewick","annotator","element_array","nodeDisplay","join","resortChildren","comparator","start_node","sum","sort","update_layout","maxParsimony","pop_mp_mat","mp","s0","s1","getTipLengths","tips","toExport","sortBy","node_operations","rooting","default_date_converter","timeParse","default_regexp","default_date_getter","exec","D","dNew","dNewRow","power","pairwise_distances","current_min","Number","MAX_VALUE","current_split","current_location","sum_below","sum_below_squared","sum_above","sum_above_squared","count_below","l","count_above","tt","score","optimization_step","current_t","breakpoint","distance","bootstrap_threshold","diameter_threshold","missing_bootstrap_value","max_path_length","clusters","bs","bootstrap_values","my_diameter","diameter","cluster","my_longest_path_terminus","my_longest_path_length","max_path","max_path_terminus","longest_path_length","root_child","pl","root_on","current_bl","date_getter","date_converter","d_string","date_value","full_year","getFullYear","year_start","Date","year_start_p1","decimal_date_value","linear_data","max_r2","best_node","copy_number","annotateCopyNumber","isNull","best_fit","fit","seqs","initKey","seqLength","mapValues","seq","seq2","neighborJoining","distanceMatrixArr","nodeList","getNodes","nodeA","createNode","nodeB","addChild","N","totalDistances","distanceMatrix","dPrime","DPrime","chunk","fill","parseInt","getDPrime","minD","Infinity","ii","jj","ijMinDPrime","deltaMatrix","createDelta","limbLengthI","limbLengthJ","newRow","nodeI","nodeJ","m","internalNodes","highestNum","unshift","treeNodeI","treeNodeJ","getNodeByName","internalNode","fastaData","sfasta","chain","keyBy","tail","percentile_threshold","resolution","core_node","min_bl2","number_of_bins","paths_to_leaves","cn","histogram","n1","n2","total_comparisons","bin_i","median_threshold","my_median","median","depths","memo","num"],"mappings":"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"}